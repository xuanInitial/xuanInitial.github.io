<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初见</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuaninitial.com/"/>
  <updated>2018-01-19T11:23:57.768Z</updated>
  <id>http://xuaninitial.com/</id>
  
  <author>
    <name>xuanInitial</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置Hikari中文文档</title>
    <link href="http://xuaninitial.com/2018/01/18/%E9%85%8D%E7%BD%AEHikari%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>http://xuaninitial.com/2018/01/18/配置Hikari中文文档/</id>
    <published>2018-01-18T09:49:30.000Z</published>
    <updated>2018-01-19T11:23:57.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>Clone <code>https://github.com/Naville/Hikari.git</code> 到本地</p><p>按照目录结构添加其他组件</p><img src="/2018/01/18/配置Hikari中文文档/1.png" alt="1.png" title=""><p><strong>Checkout Clang</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ../Hikari</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Hikari/tools</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang -r 321064</div></pre></td></tr></table></figure><p>​</p><p>报错</p><img src="/2018/01/18/配置Hikari中文文档/2.jpeg" alt="2.jpeg" title=""><p>解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">cleanup: Recursively clean up the working copy, removing write locks, resuming</div><div class="line">unfinished operations, etc.</div><div class="line">usage: cleanup [WCPATH...]</div><div class="line"></div><div class="line">  By default, finish any unfinished business in the working copy at WCPATH,</div><div class="line">  and remove write locks (shown as &apos;L&apos; by the &apos;svn status&apos; command) from</div><div class="line">  the working copy. Usually, this is only necessary if a Subversion client</div><div class="line">  has crashed while using the working copy, leaving it in an unusable state.</div><div class="line"></div><div class="line">  WARNING: There is no mechanism that will protect write locks still</div><div class="line">           being used by other Subversion clients. Running this command</div><div class="line">           while another client is using the working copy can corrupt</div><div class="line">           the working copy beyond repair!</div><div class="line"></div><div class="line">  If the --remove-unversioned option or the --remove-ignored option</div><div class="line">  is given, remove any unversioned or ignored items within WCPATH.</div><div class="line">  To prevent accidental working copy corruption, unversioned or ignored</div><div class="line">  items can only be removed if the working copy is not already locked</div><div class="line">  for writing by another Subversion client.</div><div class="line">  Note that the &apos;svn status&apos; command shows unversioned items as &apos;?&apos;,</div><div class="line">  and ignored items as &apos;I&apos; if the --no-ignore option is given to it.</div><div class="line"></div><div class="line">Valid options:</div><div class="line">  --diff3-cmd ARG          : use ARG as merge command</div><div class="line">  --remove-unversioned     : remove unversioned items</div><div class="line">  --remove-ignored         : remove ignored items</div><div class="line">  --include-externals      : also operate on externals defined by</div><div class="line">                             svn:externals properties</div><div class="line">  -q [--quiet]             : print nothing, or only summary information</div><div class="line"></div><div class="line">Global options:</div><div class="line">  --username ARG           : specify a username ARG</div><div class="line">  --password ARG           : specify a password ARG (caution: on many operating</div><div class="line">                             systems, other users will be able to see this)</div><div class="line">  --no-auth-cache          : do not cache authentication tokens</div><div class="line">  --non-interactive        : do no interactive prompting (default is to prompt</div><div class="line">                             only if standard input is a terminal device)</div><div class="line">  --force-interactive      : do interactive prompting even if standard input</div><div class="line">                             is not a terminal device</div><div class="line">  --trust-server-cert      : deprecated; same as</div><div class="line">                             --trust-server-cert-failures=unknown-ca</div><div class="line">  --trust-server-cert-failures ARG : with --non-interactive, accept SSL server</div><div class="line">                             certificates with failures; ARG is comma-separated</div><div class="line">                             list of &apos;unknown-ca&apos; (Unknown Authority),</div><div class="line">                             &apos;cn-mismatch&apos; (Hostname mismatch), &apos;expired&apos;</div><div class="line">                             (Expired certificate), &apos;not-yet-valid&apos; (Not yet</div><div class="line">                             valid certificate) and &apos;other&apos; (all other not</div><div class="line">                             separately classified certificate errors).</div><div class="line">  --config-dir ARG         : read user configuration files from directory ARG</div><div class="line">  --config-option ARG      : set user configuration option in the format:</div><div class="line">                                 FILE:SECTION:OPTION=[VALUE]</div><div class="line">                             For example:</div><div class="line">                                 servers:global:http-library=serf</div></pre></td></tr></table></figure><p>解决办法 删除tools/clang</p><p>重新执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/cfe/trunk clang -r 321064</div></pre></td></tr></table></figure><p><strong>Checkout LLD链接器 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/lld/trunk lld -r 321064</div></pre></td></tr></table></figure><p><strong>Checkout Compiler-RT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ../Hikari</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Hikari/projects</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt -r 321064</div></pre></td></tr></table></figure><p><strong>Checkout   libcxx和libcxxabi </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ../Hikari</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Hikari/projects</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx -r 321064</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi -r 321064</div></pre></td></tr></table></figure><h4 id="第二步：执行"><a href="#第二步：执行" class="headerlink" title="第二步：执行"></a>第二步：执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmake -G &quot;Ninja&quot; -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_APPEND_VC_REV=on -DLLVM_CREATE_XCODE_TOOLCHAIN=on -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ ../Hikari</div></pre></td></tr></table></figure><p>报错</p><img src="/2018/01/18/配置Hikari中文文档/3.jpeg" alt="3.jpeg" title=""><p>解决办法：删除CMakeCache.txt 和CMakeFiles文件夹</p><p>然后新建一个文件夹，在新文件夹中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmake -G &quot;Ninja&quot; -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_APPEND_VC_REV=on -DLLVM_CREATE_XCODE_TOOLCHAIN=on -DCMAKE_INSTALL_PREFIX=~/Library/Developer/ ../Hikari</div></pre></td></tr></table></figure><p>执行到这步就算是上一步的成功</p><img src="/2018/01/18/配置Hikari中文文档/4.png" alt="4.png" title=""><h4 id="第三步：执行"><a href="#第三步：执行" class="headerlink" title="第三步：执行"></a>第三步：执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ninja install-xcode-toolchain</div></pre></td></tr></table></figure><p>大概需要半个小时～1个小时,以及大概2.6gb的磁盘空间，等待结束。</p><h4 id="第四步：Xcode集成"><a href="#第四步：Xcode集成" class="headerlink" title="第四步：Xcode集成"></a>第四步：<a href="https://github.com/Naville/Hikari/wiki/Intergrating-with-Xcode" target="_blank" rel="external">Xcode集成</a></h4><p>第一步中clone到本地的项目中<code>resources/Hikari.xcplugin</code> 复制到<code>/Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/</code></p><p>TARGETS—&gt;Build Settings—&gt;All   搜索<code>Enable Index-While-Building Functionality</code>  设置为<code>NO</code></p><p>然后在<code>Xcode-&gt;Toolchains</code> ，选择Hikari</p><img src="/2018/01/18/配置Hikari中文文档/5.png" alt="5.png" title=""><h4 id="第五步：pass配置"><a href="#第五步：pass配置" class="headerlink" title="第五步：pass配置"></a>第五步：pass配置</h4><p><a href="https://github.com/Naville/Hikari-Resources" target="_blank" rel="external">clone配置</a> </p><img src="/2018/01/18/配置Hikari中文文档/6.png" alt="6.png" title=""><p>把里HikariResources以上文件全部复制到<code>~/Hikari</code>(第一步clone的文件夹)里面</p><h4 id="错误及解决方式"><a href="#错误及解决方式" class="headerlink" title="错误及解决方式"></a>错误及解决方式</h4><p>1、报错ld: file not found: /Library/Developer/Toolchains/Hikari.xctoolchain/<em>*</em></p><p>解决方式：<a href="https://github.com/Naville/Hikari/releases" target="_blank" rel="external">下载Hikari-macOSToolchain-20180118.tar.gz</a> 并解压，把<code>/Users/initial/Downloads/Users/Naville/Library/Developer/Toolchains/</code>下的<code>Hikari.xctoolchain</code>  复制到 <code>~/Library/Developer/Toolchains</code>中</p><p>2、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CMake Error: CMake was unable to find a build program corresponding to &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.</div></pre></td></tr></table></figure><p>解决方式：Ninja没装  需要安装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/ninja-build/ninja.git &amp;&amp; cd ninja</div><div class="line">$ git checkout release</div><div class="line">$ cat README</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./configure.py --bootstrap</div></pre></td></tr></table></figure><p>然后把生成的ninja复制到系统目录<code>/usr/bin</code></p><p>参考：</p><p><a href="http://llvm.org/docs/GettingStarted.html#getting-started-quickly-a-summary" target="_blank" rel="external">LLVM系统入门</a></p><p><a href="https://github.com/Naville/Hikari/wiki" target="_blank" rel="external"><strong>Hikari</strong>  wiki</a></p><p><a href="https://www.jianshu.com/p/d118615c1943" target="_blank" rel="external">Ninja安装</a></p><p><a href="https://ninja-build.org/" target="_blank" rel="external">Ninja</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一步：&quot;&gt;&lt;a href=&quot;#第一步：&quot; class=&quot;headerlink&quot; title=&quot;第一步：&quot;&gt;&lt;/a&gt;第一步：&lt;/h4&gt;&lt;p&gt;Clone &lt;code&gt;https://github.com/Naville/Hikari.git&lt;/code&gt; 到本地&lt;/
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用itms-services 协议来安装App</title>
    <link href="http://xuaninitial.com/2018/01/08/%E4%BD%BF%E7%94%A8itms-services-%E5%8D%8F%E8%AE%AE%E6%9D%A5%E5%AE%89%E8%A3%85App/"/>
    <id>http://xuaninitial.com/2018/01/08/使用itms-services-协议来安装App/</id>
    <published>2018-01-08T08:12:30.000Z</published>
    <updated>2018-01-08T08:20:52.108Z</updated>
    
    <content type="html"><![CDATA[<p>苹果允许用<a href="https://github.com/xuanInitial/node-itms-services" target="_blank" rel="external">itms-services</a>协议来直接在iphone/ipad上安装应用程序,创建安装流程如下：</p><p>1、打包一个ad_hoc ipa文件，</p><p>2、配置一个plist文件，plist文件配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">   &lt;key&gt;items&lt;/key&gt;</div><div class="line">   &lt;array&gt;</div><div class="line">       &lt;dict&gt;</div><div class="line">           &lt;key&gt;assets&lt;/key&gt;</div><div class="line">           &lt;array&gt;</div><div class="line">               &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;https://****/**/tue_test.ipa(ipa文件的访问地址)&lt;/string&gt;</div><div class="line">               &lt;/dict&gt;</div><div class="line">               &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class="line">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class="line">                   &lt;true/&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;图片的地址&lt;/string&gt;</div><div class="line">               &lt;/dict&gt;</div><div class="line">      &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class="line">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class="line">                   &lt;true/&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;图片的地址&lt;/string&gt;</div><div class="line">              &lt;/dict&gt;</div><div class="line">           &lt;/array&gt;</div><div class="line">           &lt;key&gt;metadata&lt;/key&gt;</div><div class="line">           &lt;dict&gt;</div><div class="line">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class="line">               &lt;string&gt;com.xx.xx(bundleID需要ipa中需要保持一致)&lt;/string&gt;</div><div class="line">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class="line">               &lt;string&gt;1.0(CFBundleVersion需要和ipa中的保持一致)&lt;/string&gt;</div><div class="line">               &lt;key&gt;kind&lt;/key&gt;</div><div class="line">               &lt;string&gt;software&lt;/string&gt;</div><div class="line">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class="line">               &lt;string&gt;&lt;/string&gt;</div><div class="line">               &lt;key&gt;title&lt;/key&gt;</div><div class="line">               &lt;string&gt;提示&lt;/string&gt;</div><div class="line">           &lt;/dict&gt;</div><div class="line">       &lt;/dict&gt;</div><div class="line">   &lt;/array&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure><p>3、保存app.plist文件并将其上传到<strong>HTTPS</strong>的Web服务器。</p><p>4、创建一个连接给用户下载</p><blockquote><p><strong>重要信息</strong></p><p>链接如下： <em>itms-services：//？action = download-manifest＆amp; url = 链接。</em> 将<strong>链接</strong> 替换为位于Web服务器上的app.plist文件的URL。</p></blockquote><p>5、生成二维码下载</p><p><a href="https://github.com/xuanInitial/UrlDownModel" target="_blank" rel="external">下载模板</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;苹果允许用&lt;a href=&quot;https://github.com/xuanInitial/node-itms-services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;itms-services&lt;/a&gt;协议来直接在iphone/ipad上安装应用程序
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://xuaninitial.com/2017/12/31/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://xuaninitial.com/2017/12/31/2017年终总结/</id>
    <published>2017-12-31T15:45:36.000Z</published>
    <updated>2017-12-31T15:49:42.120Z</updated>
    
    <content type="html"><![CDATA[<p>年终了总想着要写点什么东西，又不知道从何写起，想到哪里写到哪里吧</p><p>先说工作吧，入坑三年，这边公司也满一年了，忙忙碌碌的一年</p><p>这一年看了很多书 凡人开始仙界篇了 算是10年的一个开始，也算是青春的结束 辰一更也开始新的征程了</p><p>小黄书断断续续的看了3分子1吧 明年继续 </p><p>非虫大佬的逆向分析倒是读了一半</p><p>代码之外的生存指南 读完了想写点东西一直没写</p><p>小王子  一本伤心的童话故事</p><p>swift 1~4一直没系统的学习 写过一些东西 在用 还需要学习</p><p>Android、h5、css 稍有涉猎</p><p>自己的时间比较少吧 游戏玩的少了，学习的时间有点不足，旅游什么的就不说了，18年希望可以拿出更多属于自己的时间吧</p><p>18岁的结束 90后的时代结束了  18年加油祝自己好运</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;年终了总想着要写点什么东西，又不知道从何写起，想到哪里写到哪里吧&lt;/p&gt;
&lt;p&gt;先说工作吧，入坑三年，这边公司也满一年了，忙忙碌碌的一年&lt;/p&gt;
&lt;p&gt;这一年看了很多书 凡人开始仙界篇了 算是10年的一个开始，也算是青春的结束 辰一更也开始新的征程了&lt;/p&gt;
&lt;p&gt;小黄书断
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://xuaninitial.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记_1</title>
    <link href="http://xuaninitial.com/2017/11/24/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://xuaninitial.com/2017/11/24/逆向学习笔记-1/</id>
    <published>2017-11-24T04:02:43.000Z</published>
    <updated>2017-11-24T04:04:03.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>main</strong>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__attribute__((constructor)) static void entry() &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define CHConstructor static __attribute__((constructor)) void CHConcat(CHConstructor, __LINE__)()</div></pre></td></tr></table></figure><p>通过view的nextResponder方法，可以找出它所属的视图控制器ViewController</p><ul><li>内存地址＝进程内存基地址＋函数在二进制中的偏移量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">br s -a &apos;0X00000000000E800+0x00000001017d7c6c&apos;</div></pre></td></tr></table></figure><ul><li>函数在二进制中的偏移量＝内存地址 - 进程内存基地址</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;main&lt;/strong&gt;函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="iOSRE" scheme="http://xuaninitial.com/tags/iOSRE/"/>
    
  </entry>
  
  <entry>
    <title>UITableView卡顿问题处理</title>
    <link href="http://xuaninitial.com/2017/11/24/UITableView%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>http://xuaninitial.com/2017/11/24/UITableView卡顿问题处理/</id>
    <published>2017-11-24T03:58:10.000Z</published>
    <updated>2017-11-24T03:59:20.753Z</updated>
    
    <content type="html"><![CDATA[<p>1、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;</div></pre></td></tr></table></figure><p>这个代理方法每次滑动都会调用 建议不要在里面做耗时操作</p><p>eg:重新计算高度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CGSize strSize = [str boundingRectWithSize:CGSizeMake(BHSCREEN_W - 32, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName:BH14Font&#125; context:nil].size;</div><div class="line">   return strSize.height+10;</div></pre></td></tr></table></figure><p>2、富文本串AttributeString的绘制也很耗时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *AttributedStr = [[NSMutableAttributedString alloc]initWithString:str];</div><div class="line">           [AttributedStr addAttribute:NSFontAttributeName</div><div class="line"></div><div class="line">                                 value:[UIFont systemFontOfSize:16.0]</div><div class="line"></div><div class="line">                                 range:NSMakeRange(5, str.length-5)];</div><div class="line"></div><div class="line">           [AttributedStr addAttribute:NSForegroundColorAttributeName</div><div class="line"></div><div class="line">                                 value:[UIColor redColor]</div><div class="line"></div><div class="line">                                 range:NSMakeRange(5, str.length-5)];</div><div class="line"></div><div class="line">           _AmountPayableLabel.attributedText = AttributedStr;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div 
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>NSInteger32位64位问题</title>
    <link href="http://xuaninitial.com/2017/11/24/NSInteger32%E4%BD%8D64%E4%BD%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://xuaninitial.com/2017/11/24/NSInteger32位64位问题/</id>
    <published>2017-11-24T03:55:55.000Z</published>
    <updated>2017-11-24T03:57:25.526Z</updated>
    
    <content type="html"><![CDATA[<p>64bit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orderNum = 1150815970118744;</div></pre></td></tr></table></figure><p>32bit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) po model.orderNum</div><div class="line">-1714505370</div><div class="line"></div><div class="line">(lldb)</div></pre></td></tr></table></figure><p>解决方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic,copy) NSString * orderNum;</div></pre></td></tr></table></figure><p>原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#if __LP64__ || (TARGET_OS_EMBEDDED &amp;&amp; !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64</div><div class="line">typedef long NSInteger;</div><div class="line">typedef unsigned long NSUInteger;</div><div class="line">#else</div><div class="line">typedef int NSInteger;</div><div class="line">typedef unsigned int NSUInteger;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>NSInteger在32位时等同于int，在64位时等同于long</p><p>32bit下：</p><p>unsigned int 0～4294967295  </p><p>int -2147483648～2147483647 </p><p>long long的最大值：9223372036854775807<br>long long的最小值：-9223372036854775808</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;64bit&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew</title>
    <link href="http://xuaninitial.com/2017/11/24/Homebrew/"/>
    <id>http://xuaninitial.com/2017/11/24/Homebrew/</id>
    <published>2017-11-24T03:51:08.000Z</published>
    <updated>2017-11-24T03:53:05.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></h1><p><a href="https://github.com/GoSSIP-SJTU/Armariris" target="_blank" rel="external">LLVM混淆框架</a></p><p>删除brew   </p><p>brew  cleanup</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Home
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2配色</title>
    <link href="http://xuaninitial.com/2017/11/15/iTerm2%E9%85%8D%E8%89%B2/"/>
    <id>http://xuaninitial.com/2017/11/15/iTerm2配色/</id>
    <published>2017-11-15T12:46:24.000Z</published>
    <updated>2017-11-15T12:47:51.484Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.iterm2.com/downloads.html" target="_blank" rel="external">iTerm2下载</a></p><p>在系统的终端下运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># clone</div><div class="line">git clone https://github.com/powerline/fonts.git --depth=1</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># install</div><div class="line">cd fonts</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./install.sh</div></pre></td></tr></table></figure><p>然后再运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install powerline-status</div></pre></td></tr></table></figure><p>最后重启iTerm2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.iterm2.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在系统的终端下运行以下命令&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Permission denied (publickey)</title>
    <link href="http://xuaninitial.com/2017/09/25/Permission-denied-publickey/"/>
    <id>http://xuaninitial.com/2017/09/25/Permission-denied-publickey/</id>
    <published>2017-09-25T07:22:52.000Z</published>
    <updated>2017-11-15T12:53:25.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh准备连接远程服务器却遭提示”Permission-denied-publickey-”"><a href="#ssh准备连接远程服务器却遭提示”Permission-denied-publickey-”" class="headerlink" title="ssh准备连接远程服务器却遭提示”Permission denied (publickey)”"></a>ssh准备连接远程服务器却遭提示”Permission denied (publickey)”</h2><p>1、首先确认有没有公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls</div></pre></td></tr></table></figure><p>看有没有文件</p><p>2、如没有则按下述方法生成： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p>一路回车…… </p><p>最后，输入验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>确认OK即可。</p><p>再尝试输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><p>3、github账号设置ssh公钥信息</p><p>依次点击”Setting -&gt; SSH Keys”-&gt;”New SSH key” 添加</p><p>Title处随便写</p><p> key拷贝<code>cat ~/.ssh/id_rsa.pub</code> 打印的字符串</p><p>4、如果以上方法都做了还是提示<code>Permission denied (publickey)</code></p><p>那就是苹果抽风了执行下面操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add  id_rsa</div></pre></td></tr></table></figure><p><strong>id_rsa 你的公钥</strong></p><p>5、如果还是不行 欢迎联系我一起讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ssh准备连接远程服务器却遭提示”Permission-denied-publickey-”&quot;&gt;&lt;a href=&quot;#ssh准备连接远程服务器却遭提示”Permission-denied-publickey-”&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓HTTPS包</title>
    <link href="http://xuaninitial.com/2017/09/25/Charles%E6%8A%93HTTPS%E5%8C%85/"/>
    <id>http://xuaninitial.com/2017/09/25/Charles抓HTTPS包/</id>
    <published>2017-09-25T06:50:21.000Z</published>
    <updated>2017-09-25T06:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>首先打开Charles菜单，选择安装Charles证书到移动设备</li></ul><img src="/2017/09/25/Charles抓HTTPS包/1.png" alt="1.png" title=""><p>一路OK</p><ul><li><p>手机上用Safari  打开 <a href="[http://charlesproxy.com/getssl]">网址</a>  然后信任  手机设置—&gt;通用—&gt;你添加的证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://charlesproxy.com/getssl</div></pre></td></tr></table></figure></li><li><p>选择Proxy-SSL Proxying Settings，设置启用SSL代理能力，并自行Add需要抓取的服务地址</p></li></ul><img src="/2017/09/25/Charles抓HTTPS包/2.png" alt="2.png" title=""><img src="/2017/09/25/Charles抓HTTPS包/3.png" alt="3.png" title="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;首先打开Charles菜单，选择安装Charles证书到移动设备&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2017/09/25/Charles抓HTTPS包/1.png&quot; alt=&quot;1.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;一路OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>iOS11适配问题总结</title>
    <link href="http://xuaninitial.com/2017/09/21/iOS11%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://xuaninitial.com/2017/09/21/iOS11适配问题总结/</id>
    <published>2017-09-21T05:28:11.000Z</published>
    <updated>2017-11-15T12:45:45.328Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、tableview-留空"><a href="#一、tableview-留空" class="headerlink" title="一、tableview 留空"></a>一、tableview 留空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style&#123;</div><div class="line"></div><div class="line">    self = [super initWithFrame:frame style:style];</div><div class="line"></div><div class="line">    if (self) &#123;</div><div class="line"></div><div class="line">        self.estimatedRowHeight = 0;</div><div class="line"></div><div class="line">        self.estimatedSectionHeaderHeight = 0;</div><div class="line"></div><div class="line">        self.estimatedSectionFooterHeight = 0;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return self;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="二、导航栏返回按钮"><a href="#二、导航栏返回按钮" class="headerlink" title="二、导航栏返回按钮"></a>二、导航栏返回按钮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UIImage *backButtonImage = [[UIImage imageNamed:@&quot;arrow_back_gray&quot;] resizableImageWithCapInsets:UIEdgeInsetsMake(0, 30, 0, 0)</div><div class="line">                                                                                      resizingMode:UIImageResizingModeTile];</div><div class="line">   [[UIBarButtonItem appearance] setBackButtonBackgroundImage:backButtonImage</div><div class="line">                                                     forState:UIControlStateNormal</div><div class="line">                                                   barMetrics:UIBarMetricsDefault];</div><div class="line">   </div><div class="line">   self.navigationController.navigationBar.backIndicatorImage = [UIImage imageNamed:@&quot;arrow_back_gray&quot;];</div><div class="line">   self.navigationController.navigationBar.backIndicatorTransitionMaskImage = [UIImage imageNamed:@&quot;arrow_back_gray&quot;];</div></pre></td></tr></table></figure><h4 id="三、判断11"><a href="#三、判断11" class="headerlink" title="三、判断11"></a>三、判断11</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (@available(iOS 11.0, *)) &#123;</div><div class="line"></div><div class="line">    &#125; else &#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= __IPHONE_11_0</div><div class="line"></div><div class="line">#eles</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure><h4 id="四、键盘默认大写不起作用-（待解决）"><a href="#四、键盘默认大写不起作用-（待解决）" class="headerlink" title="四、键盘默认大写不起作用 （待解决）"></a>四、键盘默认大写不起作用 （待解决）</h4><p>   _carTextField.autocapitalizationType=UITextAutocapitalizationTypeAllCharacters;//所有字母大写</p><h4 id="五、左滑删除崩溃问题"><a href="#五、左滑删除崩溃问题" class="headerlink" title="五、左滑删除崩溃问题"></a>五、左滑删除崩溃问题</h4><p>使用 <a href="https://github.com/MortimerGoro/MGSwipeTableCell" target="_blank" rel="external">MGSwipeTableCell</a></p><p>你的cell 继承MGSwipeTableCell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cell.delegate = self;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">#pragma mark Swipe Delegate</div><div class="line"></div><div class="line">-(BOOL) swipeTableCell:(MGSwipeTableCell*) cell canSwipe:(MGSwipeDirection) direction;</div><div class="line">&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(NSArray*) swipeTableCell:(MGSwipeTableCell*) cell swipeButtonsForDirection:(MGSwipeDirection)direction</div><div class="line">             swipeSettings:(MGSwipeSettings*) swipeSettings expansionSettings:(MGSwipeExpansionSettings*) expansionSettings</div><div class="line">&#123;</div><div class="line"></div><div class="line">    swipeSettings.transition = MGSwipeTransitionBorder;</div><div class="line">    expansionSettings.buttonIndex = 0;</div><div class="line"></div><div class="line">    __weak BHAllMessageVC * me = self;</div><div class="line"></div><div class="line"></div><div class="line">    BHMessageModel *model =  [me mailForIndexPath:[self.allMessageTableView indexPathForCell:cell]];</div><div class="line"></div><div class="line">     if (direction == MGSwipeDirectionLeftToRight) &#123;</div><div class="line">         return nil;</div><div class="line">     &#125;else&#123;</div><div class="line">         expansionSettings.fillOnTrigger = YES;</div><div class="line">         expansionSettings.threshold = 1.1;</div><div class="line"></div><div class="line">         CGFloat padding = 15;</div><div class="line"></div><div class="line">         MGSwipeButton * trash = [MGSwipeButton buttonWithTitle:@&quot;删除&quot; backgroundColor:[UIColor colorWithRed:1.0 green:59/255.0 blue:50/255.0 alpha:1.0] padding:padding callback:^BOOL(MGSwipeTableCell *sender) &#123;</div><div class="line"></div><div class="line">             NSIndexPath * indexPath = [me.allMessageTableView indexPathForCell:sender];</div><div class="line">             [me deleteMail:indexPath addModel:model];</div><div class="line">              [cell hideSwipeAnimated:YES];</div><div class="line">             return NO; //don&apos;t autohide to improve delete animation</div><div class="line">         &#125;];</div><div class="line"></div><div class="line">         return @[trash];</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-(BHMessageModel *) mailForIndexPath:(NSIndexPath*) path</div><div class="line">&#123;</div><div class="line">    return [self.allMessageData objectAtIndex:path.section];</div><div class="line">&#125;</div><div class="line">-(void) deleteMail:(NSIndexPath *) indexPath addModel:(BHMessageModel*)model</div><div class="line">&#123;</div><div class="line">    [self.allMessageData removeObjectAtIndex:indexPath.section];</div><div class="line">    [self.allMessageTableView deleteSections:[NSIndexSet indexSetWithIndex:indexPath.section] withRowAnimation:UITableViewRowAnimationNone];</div><div class="line"></div><div class="line">    [self.allMessageTableView endUpdates];</div><div class="line"></div><div class="line">    [[BHQuoteManager manager] PostDeleteMessageByMesasgeId:model.messageId Sucess:^(NSMutableDictionary *dicData) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        NSLog(@&quot;%@&quot;,dicData);</div><div class="line"></div><div class="line">    &#125; failure:^(NSError *error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">        BHAlert(@&quot;&quot;, @&quot;删除消息失败&quot;);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void) swipeTableCell:(MGSwipeTableCell*) cell didChangeSwipeState:(MGSwipeState)state gestureIsActive:(BOOL)gestureIsActive</div><div class="line">&#123;</div><div class="line">    NSString * str;</div><div class="line">    switch (state) &#123;</div><div class="line">        case MGSwipeStateNone: str = @&quot;None&quot;; break;</div><div class="line">        case MGSwipeStateSwippingLeftToRight: str = @&quot;SwippingLeftToRight&quot;; break;</div><div class="line">        case MGSwipeStateSwippingRightToLeft: str = @&quot;SwippingRightToLeft&quot;; break;</div><div class="line">        case MGSwipeStateExpandingLeftToRight: str = @&quot;ExpandingLeftToRight&quot;; break;</div><div class="line">        case MGSwipeStateExpandingRightToLeft: str = @&quot;ExpandingRightToLeft&quot;; break;</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Swipe state: %@ ::: Gesture: %@&quot;, str, gestureIsActive ? @&quot;Active&quot; : @&quot;Ended&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="六、UIScrollView"><a href="#六、UIScrollView" class="headerlink" title="六、UIScrollView"></a>六、UIScrollView</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (@available(iOS 11.0, *)) &#123;</div><div class="line">            _scrollView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>####七、线程错误</p><p><strong>Main Thread Checker: UI API called on a background thread: -[UIApplication applicationState]PID: 37870, TID: 5563145, Thread name: (none), Queue name: com.tencent.bugly.operationQueue (QOS: UTILITY), QoS: 17</strong></p><p>正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_main_queue()</div></pre></td></tr></table></figure><p>error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_sync(dispatch_get_main_queue()</div></pre></td></tr></table></figure><p><a href="https://developer.apple.com/documentation/code_diagnostics/main_thread_checker?language=objc" target="_blank" rel="external">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、tableview-留空&quot;&gt;&lt;a href=&quot;#一、tableview-留空&quot; class=&quot;headerlink&quot; title=&quot;一、tableview 留空&quot;&gt;&lt;/a&gt;一、tableview 留空&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xuaninitial.com/2017/09/19/hello-world/"/>
    <id>http://xuaninitial.com/2017/09/19/hello-world/</id>
    <published>2017-09-19T05:05:31.000Z</published>
    <updated>2017-09-19T05:05:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>历时3天 node npm nvm git  hexo      搭建完成了     熟悉的hello word</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;历时3天 node npm nvm git  hexo      搭建完成了     熟悉的hello word&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017-08-翻译-MacRansom勒索软件</title>
    <link href="http://xuaninitial.com/2017/09/19/2017-08-%E7%BF%BB%E8%AF%91-MacRansom%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6/"/>
    <id>http://xuaninitial.com/2017/09/19/2017-08-翻译-MacRansom勒索软件/</id>
    <published>2017-09-19T03:08:49.000Z</published>
    <updated>2017-09-25T08:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSX-MacRansom"><a href="#OSX-MacRansom" class="headerlink" title="OSX/MacRansom"></a>OSX/MacRansom</h2><p><strong>原文链接：</strong> <a href="https://objective-see.com/blog/blog_0x1E.html" target="_blank" rel="external">OSX/MacRansom</a></p><p><strong>翻译：</strong>  初 见　　<strong>校对：</strong>  布兜儿</p><h3 id="分析最近Mac上的勒索软件"><a href="#分析最近Mac上的勒索软件" class="headerlink" title="分析最近Mac上的勒索软件"></a>分析最近Mac上的勒索软件</h3><p>6/12/2017</p><p>想一起玩吗？我共享了恶意软件的二进制可执行文件(“macRansom”)，可以在<a href="https://objective-see.com/downloads/malware/macRansom.zip" target="_blank" rel="external">这里</a>下载 (密码:<code>infect3d</code> )。</p><p><strong>请不要感染你自己的 Mac</strong></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>周一快乐!今天我们有一些新的关于 MacOS 勒索软件的博客记录：）</p><p>由Fortinet公司的研究人员发现，Rommel Joven（<a href="https://twitter.com/rommeljoven17" target="_blank" rel="external">@rommeljoven17</a>）和Wayne Chin Yick Low（<a href="https://twitter.com/x9090" target="_blank" rel="external">@x9090</a>）发布的标题为<a href="https://blog.fortinet.com/2017/06/09/macransom-offered-as-ransomware-as-a-service" target="_blank" rel="external">“MacRansom最初的恶意软件：提供的勒索软件作为服务”</a>的文章。请阅读后再来这里！</p><p>现在,我应该在白皮书上为我的<a href="https://www.virusbulletin.com/conference/vb2017/abstracts/offensive-malware-analysis-dissecting-osxfruitfly-custom-cc-server/" target="_blank" rel="external">VirusBulletin 2017 talk</a> 写点东西，好的，开门见山，时间是宝贵的。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>OSX / MacRansom 是一款相当差劲的勒索软件。从技术角度来看，它并不是特别先进。有趣的是,它的目标是 macOS，并“作为一项服务”来提供。老实说我不是100%肯定，后者意味着什么——但 Fortinet 提到了一个基于 TOR 的门户网站，并通过电子邮件与作者联系,以便定制恶意软件。我猜这是恶意软件作者提供的服务？</p><p>不管怎样，来点技术细节吧！当恶意软件运行时（正如Fortinet的文章指出的），它进行各种反调试和反虚拟机检查。这些都是运行的基本，以及微不足道的：</p><ul><li>反调试检查发生在<code>0000000 100001075</code>地址处。这是通过调用带有 <code>pt_deny_attach</code> 标识的 ptrace 完成的。</li></ul><p>这个反调试逻辑是众所周知的（我们上次讨论过的<a href="https://objective-see.com/blog/blog_0x1F.html" target="_blank" rel="external">博客</a>），甚至在苹果的ptrace手册页中也有记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">man ptrace</div><div class="line"></div><div class="line">PTRACE(2)</div><div class="line">NAME</div><div class="line">ptrace -- process tracing and debugging</div><div class="line"></div><div class="line">... </div><div class="line"></div><div class="line"></div><div class="line">PT_DENY_ATTACH</div><div class="line"> This request is the other operation used by the traced process; it allows a process that</div><div class="line"> is not currently being traced to deny future traces by its parent. All other arguments</div><div class="line"> are ignored. If the process is currently being traced, it will exit with the exit status</div><div class="line"> of ENOTSUP; otherwise, it sets a flag that denies future traces. An attempt by the parent</div><div class="line"> to trace a process which has set this flag will result in a segmentation violation in</div><div class="line"> the parent.</div></pre></td></tr></table></figure><p>简而言之,<code>PT_DENY_ATTACH(0x1f)</code> 一旦执行，就会阻止用户模式调试器附加到进程。但是，由于LLDB已经被附加到该进程(感谢——waitfor的论点)，我们可以巧妙地避开这个问题。怎么做?在 pthread 上设置一个断点，然后简单地执行一个 <code>thread return</code> 命令。</p><p>这是在告知调试器停止执行函数中的代码,并执行一个返回命令“退出”到调用者。 Neat!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class="line">frame #0: 0x00007fffad499d80 libsystem_kernel.dylib`__ptrace</div><div class="line"></div><div class="line"></div><div class="line">(lldb) thread return</div></pre></td></tr></table></figure><p>通过反调试逻辑的方式，我们可以调试我们想要的内容！</p><ul><li>第一个反虚拟机检查发生在<code>0x00000001000010BB</code>。</li></ul><p>解码字符串（字符串解码程序：<code>0x0000000100001f30</code>）之后，代码通过系统调用来执行它，如果返回非零的值，则退出。具体来说，它执行的是<code>sysctl HW.model|grep MAC &gt; /dev/null</code> ‘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(lldb) x/s $rdi</div><div class="line">0x100200060: &quot;sysctl hw.model|grep Mac &gt; /dev/null&quot;</div><div class="line"></div><div class="line">(lldb) n</div><div class="line">Process 7148 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class="line"></div><div class="line">frame #0: 0x00000001000010bb macRansom`___lldb_unnamed_symbol1$$macRansom</div><div class="line">  -&gt; 0x1000010bb &lt;+203&gt;: callq 0x1000028fe ; symbol stub for: system</div><div class="line">  0x1000010c0 &lt;+208&gt;: testl %eax, %eax</div><div class="line">  0x1000010c2 &lt;+210&gt;: jne 0x100001b05 ; &lt;+2837&gt;</div><div class="line">  0x1000010c8 &lt;+216&gt;: movaps 0x19f1(%rip), %xmm0</div></pre></td></tr></table></figure><p>在虚拟机（VM）中将返回一个非零值，因为 hw.model 的返回值将会类似于 “vmware7,1”：</p><p>在本机硬件上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sysctl hw.model</div><div class="line">hw.model: MacBookAir7,2</div></pre></td></tr></table></figure><p>在虚拟机上（例如：在 VM 上）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sysctl hw.model</div><div class="line">hw.model: VMware7,1</div></pre></td></tr></table></figure><p>为了绕过这个检查（在调试器中），需要掉托系统调用的步骤，然后将 RAX 设置为零：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(lldb) reg write $rax 0</div><div class="line"></div><div class="line">(lldb) reg read</div><div class="line">General Purpose Registers:</div><div class="line">  rax = 0x0000000000000000</div><div class="line">  rbx = 0xfffffffffffffffe</div><div class="line">  rcx = 0x0000010000000100</div></pre></td></tr></table></figure><p>这将欺骗恶意软件继续执行，而不是退出。</p><ul><li>接下来的反虚拟机检查发生在<code>0x0000000100001126</code>。同样，恶意软件解码一个字符串，通过系统调用执行它，如果返回值不是零，则退出。这个检查执行：<code>echo $((sysctl -n hw.logicalcpu</code>/<code>sysctl -n hw.physicalcpu))|grep 2 &gt; /dev/null</code> 来查看 CPU 数。看起来在 VM 上，这个值不是两个，所以恶意软件将退出以“逃避”分析。在本机硬件上：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sysctl -n hw.logicalcpu</div><div class="line">4</div><div class="line">$ sysctl -n hw.physicalcpu</div><div class="line">2</div></pre></td></tr></table></figure><p>在虚拟机上（例如：在 VM 上）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sysctl -n hw.logicalcpu</div><div class="line">2</div><div class="line">$ sysctl -n hw.physicalcpu</div><div class="line">2</div></pre></td></tr></table></figure><p>同样，如果恶意软件正在执行的系统没有两个CPU（默认VM可能不会），恶意软件将退出。要（在调试器中）绕过这个检查，只需要再次跳过系统调用，然后将RAX设置为零。</p><p>好的，以上就是反分析检查。虽然我们在调试器中动态地绕过了它们，但也可以通过 patch 永久性地解决。例如，可以简单地 patch JNZ 指令（用 NOP 核对反虚拟机检查的返回值）。</p><p>假设所有的反分析都已通过或被阻止，之后，恶意软件会将自身作为一个启动代理。做到这一点通过:</p><ol><li>将自身复制到 <code>~/Library/.FS_Store</code></li><li>解码一个嵌入的 plist 并写入  <code>~/Library/LaunchAgents/com.apple.finder.plist</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">cat ~/Library/LaunchAgents/com.apple.finder.plist</div><div class="line"></div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">  &lt;key&gt;Label&lt;/key&gt;</div><div class="line">  &lt;string&gt;com.apple.finder&lt;/string&gt;</div><div class="line">  &lt;key&gt;StartInterval&lt;/key&gt;</div><div class="line">  &lt;integer&gt;120&lt;/integer&gt;</div><div class="line">  &lt;key&gt;RunAtLoad&lt;/key&gt;</div><div class="line">  &lt;true/&gt;</div><div class="line">  &lt;key&gt;ProgramArguments&lt;/key&gt;</div><div class="line">  &lt;array&gt;</div><div class="line">    &lt;string&gt;bash&lt;/string&gt;</div><div class="line">    &lt;string&gt;-c&lt;/string&gt;</div><div class="line">    &lt;string&gt;! pgrep -x .FS_Store &amp;&amp; ~/Library/.FS_Store&lt;/string&gt;</div><div class="line">  &lt;/array&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure><p>将 <code>RunAtLoad</code> 键值设置为 <code>true</code>  那么当用户登录时恶意软件将自动启动。具体来说，操作系统将执行键值为 <code>ProgramArguments</code> 设置的值: <code>bash -c ! pgrep -x .FS_Store &amp;&amp; ~/Library/.FS_Store</code>。这个命令将首先检查以确保恶意软件尚未运行,然后启动恶意软件 <code>(~/Library/.FS_Store)</code>。</p><p>幸运的 Objective-See 使用者们， <a href="https://objective-see.com/products/blockblock.html" target="_blank" rel="external">BlockBlock</a> 将会提醒你这个持续性的尝试：</p><img src="/2017/09/19/2017-08-翻译-MacRansom勒索软件/bbAlert.png" alt="bbAlert.png" title=""><p>由于恶意软件第一次尝试驻留是在密文件之前，所以点击警报上的 <code>Block</code>， BlockBlock 将阻止恶意软件做任何伤害:)</p><p>为了便于分析，如果我们允许恶意软件的驻留，它通过以下方式启动它刚刚保存的自身的副本 <code>(~/Library/.FS_Store)</code>：</p><p><code>launchctl load ~/Library/LaunchAgents/com.apple.finder.plist</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Process 7148 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class="line"></div><div class="line">frame #0: 0x0000000100001ec6 macRansom`___lldb_unnamed_symbol1$$macRansom + 3798</div><div class="line">  -&gt; 0x100001ec6 &lt;+3798&gt;: callq 0x1000028fe ; symbol stub for: system</div><div class="line">  0x100001ecb &lt;+3803&gt;: movb $0x25, -0x4733(%rbp)</div><div class="line">  0x100001ed2 &lt;+3810&gt;: movb $0x73, -0x4732(%rbp)</div><div class="line">  0x100001ed9 &lt;+3817&gt;: movb $0x0, -0x4731(%rbp)</div><div class="line"></div><div class="line">(lldb) x/s $rdi</div><div class="line">0x7fff5fbfb960: &quot;launchctl load /Users/user/Library/LaunchAgents/com.apple.finder.plist&quot;</div></pre></td></tr></table></figure><p>该恶意软件的原始实例将退出，因为副本正在运行。</p><p>要通过调试恶意软件的持续性副本来继续分析，请在辅助调试器窗口中执行以下操作，在恶意软件的原始实例启动持久性副本（〜/ Library / .FS_Store）之前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo lldb (lldb) process attach --name .FS_Store --waitfor</div></pre></td></tr></table></figure><p>这将导致调试器在启动时，自动附加到恶意软件的持续性副本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sudo lldb (lldb) process attach --name .FS_Store --waitfor</div><div class="line"></div><div class="line">Process 7280 stopped</div><div class="line">* thread #1, stop reason = signal SIGSTOP</div><div class="line"></div><div class="line">frame #0: 0x000000011140e000 dyld`_dyld_start</div><div class="line">  -&gt; 0x11140e000 &lt;+0&gt;: popq %rdi</div><div class="line">  0x11140e001 &lt;+1&gt;: pushq $0x0</div><div class="line">  0x11140e003 &lt;+3&gt;: movq %rsp, %rbp</div><div class="line">  0x11140e006 &lt;+6&gt;: andq $-0x10, %rsp</div><div class="line"></div><div class="line">Executable module set to &quot;/Users/user/Library/.FS_Store&quot;.</div><div class="line">Architecture set to: x86_64h-apple-macosx.</div></pre></td></tr></table></figure><p>由于恶意软件的持续性副本是拷贝的，所以它执行相同的反调试和反 VM 逻辑。然后，它将以持续状态运行，检查它是否触发了“触发”日期。也就是说，它将检查当前时间是否超过硬编码值。据Fortinet公司的报告，这是由恶意软件作者（“勒索软件作为服务的一部分”）设置的。如果当前时间是在这个日期之前，恶意软件将不会加密（赎金）任何文件，而将直接退出：</p><img src="/2017/09/19/2017-08-翻译-MacRansom勒索软件/timeCheck.png" alt="timeCheck.png" title=""><p>但是，如果触发了触发日期,则开始扫描！具体在地址<code>0x000000010b4eb5f5</code>处，恶意软件通过系统执行以下操作，开始加密用户的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(lldb)</div><div class="line">Process 7280 stopped</div><div class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = instruction step over</div><div class="line"></div><div class="line">frame #0: 0x000000010b4eb5f5 .FS_Store`___lldb_unnamed_symbol1$$.FS_Store + 1541</div><div class="line">  -&gt; 0x10b4eb5f5 &lt;+1541&gt;: callq 0x10b4ec8fe ; symbol stub for: system</div><div class="line">  0x10b4eb5fa &lt;+1546&gt;: movaps 0x151f(%rip), %xmm0</div><div class="line">  0x10b4eb601 &lt;+1553&gt;: movaps %xmm0, -0x850(%rbp)</div><div class="line">  0x10b4eb608 &lt;+1560&gt;: movb $0x0, -0x840(%rbp)</div><div class="line"></div><div class="line">(lldb) x/s $rdi</div><div class="line">0x7fff547123e0: &quot;find /Volumes ~ ! -path &quot;/Users/user/Library/.FS_Store&quot; -type f -size +8c -user `whoami` -perm -u=r -exec &quot;/Users/user/Library/.FS_Store&quot; &#123;&#125; +&quot;</div></pre></td></tr></table></figure><p>这个命令是做什么的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find /Volumes ~ ! -path &quot;/Users/user/Library/.FS_Store&quot; -type f -size +8c -user `whoami` -perm -u=r -exec &quot;/Users/user/Library/.FS_Store&quot; &#123;&#125; +</div></pre></td></tr></table></figure><p>首先，返回一个可读的、大于8字节的用户文件列表。然后这些文件将被传递给恶意软件的一个新实例，以便进行加密！我们可以通过一个实用工具来观察到这种加密，如 fs_usage：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">access (_W__) /Users/user/Desktop/pleaseDontEncryptMe.txt</div><div class="line">open F=50 (RW____) /Users/user/Desktop/pleaseDontEncryptMe.txt</div><div class="line">WrData[AT1] D=0x018906a8 /Users/user/Desktop/pleaseDontEncryptMe.txt</div></pre></td></tr></table></figure><p>该恶意软件的实际加密程序从地址 <code>0x0000000100002160</code> 处开始。通过 <code>pthread_create()</code> 间接调用这个函数：</p><img src="/2017/09/19/2017-08-翻译-MacRansom勒索软件/ptrace.png" alt="ptrace.png" title=""><p>正如 Fortinet 所指出的那样，加密不是基于RSA算法的，而是使用对称加密算法。不幸的是（对用户来说），虽然存在一个静态 Key <code>（0x39a622ddb50b49e9）</code>，但Joven和Chin Yick Low提到，对于每个文件，这个 Key 会被“随机生成的数字”重新排列。此外，这种随机排列不会被保存，也不会传给攻击者。因此，一旦加密，文件就几乎被消失了（除了暴力破解之外）。</p><p>好消息， <a href="https://objective-see.com/products/ransomwhere.html" target="_blank" rel="external">RansomWhere?</a> 一般可以检测并阻止这种攻击：</p><img src="/2017/09/19/2017-08-翻译-MacRansom勒索软件/rwAlert.png" alt="rwAlert.png" title=""><p>聪明的读者可能会奇怪为什么警告显示 “Find” 作为负责加的密过程（与恶意软件的.FS_Store）。原因是 <code>find</code> 先调用 fork() .然后调用 execvp() 来执行通过 <code>-exec</code> 选项指定的命令。RansomWhere？使用 macOS 的 OpenBSM 审计功能来跟踪进程创建——当这种审计生成 <code>fork()</code>、<code>exec()</code>和<code>execve()</code> 的进程事件时,它不支持（据我所知）<code>execvp()</code>。因此,当它检测到 <code>fork()</code> 进程事件(并且路径设置为 <code>/usr/bin/find</code> 时),之后的 <code>execvp()</code> 调用未经审计。因此路径保持为 <code>/usr/bin/find:/</code></p><p>索要赎金的方法在哪里？重新查询操作系统后,每当它检测到一个加密文件的创建，就会提出。此时，进程（即 “find” ）将有<code>execvp()</code>，因此应返回正确的路径。或者苹果可以修复审计子系统:例如…我的意思是,这是一个审计旁路？我将提出一个雷达,……然后祈祷。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>幸运的是，MacOS 上的恶意软件仍然是相当罕见的。然而，从技术角度来看，这是没有理由的。因为 Mac 被感染，以及写一段加密用户文件的代码都是很容易的。</p><p>虽然不太可能，但如果要检查如果你被感染了，请查找以下内容：</p><p>一个名为 <code>.FS_Store</code> 的进程 (running out of (~/Library)</p><p>一个plist文件：<code>~/Library/LaunchAgents/com.apple.finder.plist</code></p><p>在这篇博文中，我们将拆解分析了 OSX / macransom - 一个基本的MacOS新勒索软件。幸运的是，有 BlockBlock 和 RansomWhere? 这样的防勒索软件，他们通常会检测勒索软件的持久性和加密。Kinda neat, huh? &lt;3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OSX-MacRansom&quot;&gt;&lt;a href=&quot;#OSX-MacRansom&quot; class=&quot;headerlink&quot; title=&quot;OSX/MacRansom&quot;&gt;&lt;/a&gt;OSX/MacRansom&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原文链接：&lt;/strong&gt; &lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://xuaninitial.com/2017/09/19/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://xuaninitial.com/2017/09/19/面试题/</id>
    <published>2017-09-19T01:36:47.000Z</published>
    <updated>2017-09-19T06:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.Class 中包含属性 Name 如何定义为对外只读对内可读写?</p><blockquote><p>在头文件中将属性定义为readonly, 在.m文件中将属性重新定义为readwrite</p></blockquote><p>2.什么情况使用 weak 关键字，相比 assign 有什么不同?</p><blockquote><ol><li>在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性</li><li>自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong。在下文也有论述：</li></ol><p>不同点：</p><ol><li>weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似，然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。而 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。</li><li>assigin 可以用非 OC 对象,而 weak 必须用于 OC 对象</li></ol></blockquote><p>3.这个写法会出什么问题: @property (copy) NSMutableArray *array;</p><blockquote><p>添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃。</p><p>//如：-[__NSArrayI removeObjectAtIndex:]: unrecognized selector sent to instance 0x7fcd1bc30460</p><p>// copy后返回的是不可变对象（即 arr 是 NSArray 类型，NSArray 类型对象不能调用 NSMutableArray 类型对象的方法）</p><p>原因：是因为 copy 就是复制一个不可变 NSArray 的对象，不能对 NSArray 对象进行添加/修改。</p></blockquote><p>4.举例说明浅复制和深复制的区别?</p><blockquote><p>浅复制  你和你的影子  你挂了 他也挂了</p><p>深复制 你和你的克隆体  你挂了 他还存在</p><p>浅拷贝只是增加了一个指针指向已经存在的内存，而深拷贝就是增加一个指针并且申请一个新的内存，使这个增加的指针指向这个新的内存</p></blockquote><p>5.iOS 开发中数据持久性有哪几种?你用到哪些?</p><blockquote><p>据存储的核心都是写文件。</p><ul><li>属性列表：只有NSString、NSArray、NSDictionary、NSData可writeToFile；存储依旧是plist文件。plist文件可以存储的7中数据类型：array、dictionary、string、bool、data、date、number。</li><li>对象序列化（对象归档）：对象序列化通过序列化的形式，键值关系存储到本地，转化成二进制流。通过runtime实现自动化归档/解档，请参考这个文章。实现NSCoding协议必须实现的两个方法：</li><li>编码（对象序列化）：把不能直接存储到plist文件中得到数据，转化为二进制数据，NSData，可以存储到本地；</li><li>解码（对象反序列化）：把二进制数据转化为本来的类型。</li><li>SQLite 数据库：大量有规律的数据使用数据库。</li><li>CoreData ：通过管理对象进行增、删、查、改操作的。它不是一个数据库，不仅可以使用SQLite数据库来保持数据，也可以使用其他的方式来存储数据。如：XML。</li></ul></blockquote><p>6.UITableViewCell 上有个 UILabel，显示 NSTimer 实现的秒表时间，手指滚动 cell 过程中，label 是否刷新，为什么?</p><blockquote><p>这是否刷新取决于timer加入到Run Loop中的Mode是什么。Mode主要是用来指定事件在运行循环中的优先级的，分为：</p><ul><li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）：默认，空闲状态</li><li>UITrackingRunLoopMode：ScrollView滑动时会切换到该Mode</li><li>UIInitializationRunLoopMode：run loop启动时，会切换到该mode</li><li>NSRunLoopCommonModes（kCFRunLoopCommonModes）：Mode集合</li></ul><p>苹果公开提供的Mode有两个：</p><ul><li>NSDefaultRunLoopMode（kCFRunLoopDefaultMode）</li><li>NSRunLoopCommonModes（kCFRunLoopCommonModes）</li><li>在编程中：如果我们把一个NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环中的时候, ScrollView滚动过程中会因为mode的切换，而导致NSTimer将不再被调度。当我们滚动的时候，也希望不调度，那就应该使用默认模式。但是，如果希望在滚动时，定时器也要回调，那就应该使用common mode。</li></ul></blockquote><p>7.UIView 和 CALayer 之间的关系?</p><blockquote><ul><li>每个 UIView 内部都有一个 CALayer 在背后提供内容的绘制和显示，并且 UIView 的尺寸样式都由内部的 Layer 所提供。两者都有树状层级结构，layer 内部有 SubLayers，View 内部有 SubViews.但是 Layer 比 View 多了个AnchorPoint</li><li>在 View显示的时候，UIView 做为 Layer 的 CALayerDelegate,View 的显示内容由内部的 CALayer 的 display</li><li>CALayer 是默认修改属性支持隐式动画的，在给 UIView 的 Layer 做动画的时候，View 作为 Layer 的代理，Layer  通过 actionForLayer:forKey:向 View请求相应的 action(动画行为)</li><li>layer 内部维护着三分 layer tree,分别是 presentLayer Tree(动画树),modeLayer Tree(模型树), Render Tree (渲染树),在做 iOS动画的时候，我们修改动画的属性，在动画的其实是 Layer 的 presentLayer的属性值,而最终展示在界面上的其实是提供 View的modelLayer</li><li>两者最明显的区别是 View可以接受并处理事件，而 Layer 不可以</li></ul></blockquote><p>8.UIWebView 有哪些性能问题?有没有可替代的方案。</p><blockquote><p>使用UIWebView来显示图片和动态图，会占用很多内存，内存占用多了之后就会出现卡顿。如果播放的图片比较少占的内存比较小或者比较常用，可以选择用imageNamed:方式获取图片。</p></blockquote><p>9.有 a、b、c、d 4个异步请求，如何判断 a、b、c、d都完成执行?如果需要 a、b、c、d顺序执行，该如何实现?</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt; dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_t group = dispatch_group_create();</div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_async(group, queue, ^&#123; /*任务a */ &#125;);</div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_async(group, queue, ^&#123; /*任务b */ &#125;);</div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_async(group, queue, ^&#123; /*任务c */ &#125;); </div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_async(group, queue, ^&#123; /*任务d */ &#125;); </div><div class="line">&gt;</div><div class="line">&gt; dispatch_group_notify(group,dispatch_get_main_queue(), ^&#123;</div><div class="line">&gt;</div><div class="line">&gt;  // 在a、b、c、d异步执行完成后，会回调这里</div><div class="line">&gt;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><p>10.Scoket 连接和 HTTP 连接的区别?</p><blockquote><ul><li>HTTP是短连接，Socket(基于TCP协议的)是长连接。尽管HTTP1.1开始支持持久连接，但仍无法保证始终连接。而Socket连接一旦建立TCP三次握手，除非一方主动断开，否则连接状态一直保持。</li><li>HTTP连接服务端无法主动发消息，Socket连接双方请求的发送先后限制。这点就比较重要了，因为它将决定二者分别适合应用在什么场景下。HTTP采用“请求-响应”机制，在客户端还没发送消息给服务端前，服务端无法推送消息给客户端。必须满足客户端发送消息在前，服务端回复在后。Socket连接双方类似peer2peer的关系，一方随时可以向另一方喊话。</li></ul></blockquote><p>11.如何把一个包含自定义对象的数组序列化到磁盘?</p><blockquote><ul><li>自定义对象需要实现NSCoding协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt; - (void)viewDidLoad&#123;   </div><div class="line">&gt; [super viewDidLoad];   </div><div class="line">&gt; User user = [User new];   </div><div class="line">&gt; Acac= [Acnew];    </div><div class="line">&gt; NSArray userArray = @[user, account];    </div><div class="line">&gt; // 存到磁盘   </div><div class="line">&gt; NSData  tempArchive = [NSKeyedArchiver archivedDataWithRootObject: userArray];</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; // 代理方法</div><div class="line">&gt; -(instancetype)initWithCoder:(NSCoder )coder&#123;   </div><div class="line">&gt; self = [super initWithCoder:coder];   </div><div class="line">&gt; if (self) &#123;       </div><div class="line">&gt; self.user = [aDecoder decodeObjectForKey:@&quot;user&quot;];        </div><div class="line">&gt; self.ac= [aDecoder decodeObjectForKey:@&quot;account&quot;];   </div><div class="line">&gt; &#125;   </div><div class="line">&gt; return self;</div><div class="line">&gt; &#125;</div><div class="line">&gt; // 代理方法</div><div class="line">&gt; -(void)encodeWithCoder:(NSCoder )aCoder&#123;   </div><div class="line">&gt; [aCoder encodeObject:self.user forKey:@&quot;user&quot;];   </div><div class="line">&gt; [aCoder encodeObject:self.acforKey:@&quot;account&quot;];</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; +(BOOL)writeToPlistFile:(NSDictionary*)settings fileName:(NSString*)filename&#123;</div><div class="line">&gt;     </div><div class="line">&gt;     NSData * data = [NSKeyedArchiver archivedDataWithRootObject:settings];</div><div class="line">&gt;     NSArray * paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);</div><div class="line">&gt;     NSString * documentsDirectory = [paths objectAtIndex:0];</div><div class="line">&gt;     NSString * path = [documentsDirectory stringByAppendingPathComponent:filename];</div><div class="line">&gt;     BOOL didWriteSuccessfull = [data writeToFile:path atomically:YES];</div><div class="line">&gt;     return didWriteSuccessfull;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>12.iOS 的沙盒目录结构是怎样的? App Bundle 里面都有什么?</p><blockquote><p><strong>沙盒结构</strong></p><ul><li>Application：存放程序源文件，上架前经过数字签名，上架后不可修改</li><li>Documents：常用目录，iCloud备份目录，存放数据,这里不能存缓存文件,否则上架不被通过</li><li>Library<ul><li>Caches：存放体积大又不需要备份的数据,SDWebImage缓存路径就是这个</li><li>Preference：设置目录，iCloud会备份设置信息</li></ul></li><li>tmp：存放临时文件，不会被备份，而且这个文件下的数据有可能随时被清除的可能</li></ul><p><strong>App Bundle</strong></p><ul><li>Info.plist:此文件包含了应用程序的配置信息.系统依赖此文件以获取应用程序的相关信息</li><li>可执行文件:此文件包含应用程序的入口和通过静态连接到应用程序target的代码</li><li>资源文件:图片,声音文件一类的</li><li>其他:可以嵌入定制的数据资源</li></ul></blockquote><p>13.如何把一张大图缩小为 1/4 大小的缩略图?</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; UIImagePNGRepresentation(UIImage  __nonnull image);</div><div class="line">&gt; UIImageJPEGRepresentation(UIImage  __nonnull image, CGFloat compressionQuality);  </div><div class="line">&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt; //等比例缩放图片</div><div class="line">&gt; +(UIImage *)cropImage:(UIImage *)image scale:(CGFloat)scale&#123;</div><div class="line">&gt; CGSize newSize = CGSizeMake(image.size.widthscale, image.size.heightscale);</div><div class="line">&gt;</div><div class="line">&gt; UIGraphicsBeginImageContext(newSize);</div><div class="line">&gt;</div><div class="line">&gt; [image drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];</div><div class="line">&gt;</div><div class="line">&gt; image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">&gt;</div><div class="line">&gt; UIGraphicsEndImageContext();</div><div class="line">&gt;</div><div class="line">&gt; return image;</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>14.Objective-C 的 class 是如何实现的?Selector 是如何被转化为 C 语言的函数调用的?</p><blockquote><p><code>Class</code>是一个<code>objc_class</code>结构类型的指针；</p><p>类是通过<code>struct objc_class</code>结构实现的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; typedef struct objc_class *Class;      </div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>15.dispatch_async 与 dispatch_sync 解释一下?</p><p>asyne 是异步   sync 是同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;1&quot;);</div><div class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">     NSLog(@&quot;2&quot;);</div><div class="line">   &#125;);</div><div class="line"> NSLog(@“3”);</div></pre></td></tr></table></figure><p>打印结果是?</p><blockquote><p>​    132            </p></blockquote><p>​       把 async 换成 sync 打印结果是?  </p><blockquote><p>打印结果是1  然后崩溃了（线程死锁）</p><p>​    dispatch_async中加入dispatch_get_main_queue中，是异步运行中把主队列中的运行任务放到主线程中去运行。</p><p>而dispatch_sync中的dispatch_get_main_queue,是在主线程中运行主队列，当把主队列中得任务放到主线程时，会和dispatch_sync进行线程争夺。这时就会产生线程死锁。   </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.Class 中包含属性 Name 如何定义为对外只读对内可读写?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在头文件中将属性定义为readonly, 在.m文件中将属性重新定义为readwrite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.什么情况使用 weak 关键
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="面试题" scheme="http://xuaninitial.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
