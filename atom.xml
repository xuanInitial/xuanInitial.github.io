<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初见</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuaninitial.com/"/>
  <updated>2019-12-12T09:21:30.179Z</updated>
  <id>http://xuaninitial.com/</id>
  
  <author>
    <name>xuanInitial</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地库</title>
    <link href="http://xuaninitial.com/2019/12/12/%E6%9C%AC%E5%9C%B0%E5%BA%93/"/>
    <id>http://xuaninitial.com/2019/12/12/本地库/</id>
    <published>2019-12-12T09:19:03.000Z</published>
    <updated>2019-12-12T09:21:30.179Z</updated>
    
    <content type="html"><![CDATA[<p>创建podspec文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create xxx</div></pre></td></tr></table></figure><p>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |spec|</div><div class="line"></div><div class="line">//项目名</div><div class="line">  spec.name         = &quot;YYFPSLabel&quot;</div><div class="line">  //版本号</div><div class="line">  spec.version      = &quot;0.0.1&quot;</div><div class="line">  //描述</div><div class="line">  spec.summary      = &quot;test&quot;</div><div class="line"></div><div class="line">  //项目的getub地址，只支持HTTP和HTTPS地址，不支持ssh的地址</div><div class="line">  spec.homepage     = &quot;https://www.baidu.com&quot;</div><div class="line">  # spec.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;</div><div class="line">  </div><div class="line">  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"></div><div class="line">//授权文件</div><div class="line">  spec.license      = &quot;LICENSE&quot;</div><div class="line">  # spec.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;FILE_LICENSE&quot; &#125;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"></div><div class="line">  spec.author             = &#123; &quot;xuaninitial&quot; =&gt; &quot;xuaninitial@gmail.com&quot; &#125;</div><div class="line">  # Or just: spec.author    = &quot;xuaninitial&quot;</div><div class="line">  # spec.authors            = &#123; &quot;xuaninitial&quot; =&gt; &quot;xuaninitial@gmail.com&quot; &#125;</div><div class="line">  # spec.social_media_url   = &quot;https://twitter.com/xuaninitial&quot;</div><div class="line"></div><div class="line">  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"> </div><div class="line"></div><div class="line">  # spec.platform     = :ios</div><div class="line">  //支持的平台及版本</div><div class="line">  # spec.platform     = :ios, &quot;5.0&quot;</div><div class="line"></div><div class="line">  #  When using multiple platforms</div><div class="line"> // 最低要求的系统版本</div><div class="line">  # spec.ios.deployment_target = &quot;5.0&quot;</div><div class="line">  # spec.osx.deployment_target = &quot;10.7&quot;</div><div class="line">  # spec.watchos.deployment_target = &quot;2.0&quot;</div><div class="line">  # spec.tvos.deployment_target = &quot;9.0&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">//git仓库的https地址</div><div class="line">  spec.source       = &#123; :git =&gt; &quot;&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"> </div><div class="line"> // Classes所有路径下的所有匹配文件</div><div class="line">  spec.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</div><div class="line">  </div><div class="line">  spec.exclude_files = &quot;Classes/Exclude&quot;</div><div class="line"></div><div class="line">//配置公有的头文件（.h文件）</div><div class="line">  # spec.public_header_files = &quot;Classes/**/*.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Resources 动态库所使用的资源文件存放位置―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― </div><div class="line"></div><div class="line">  # spec.resource  = &quot;icon.png&quot;</div><div class="line">  # spec.resources = &quot;Resources/*.png&quot;</div><div class="line"></div><div class="line">  # spec.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"></div><div class="line">//需要用到的frameworks，不需要加.frameworks后缀</div><div class="line">  # spec.framework  = &quot;SomeFramework&quot;</div><div class="line">  # spec.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</div><div class="line"></div><div class="line">//需要用到的私有库</div><div class="line">  # spec.library   = &quot;iconv&quot;</div><div class="line">  # spec.libraries = &quot;iconv&quot;, &quot;xml2&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line"></div><div class="line">//是否要求arc</div><div class="line">  # spec.requires_arc = true</div><div class="line"></div><div class="line">  # spec.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</div><div class="line">  # spec.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure><p>验证</p><p>//验证podspec文件是否可正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure><p>LICENSE</p><p>创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch LICENSE</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">The MIT License (MIT)</div><div class="line">Copyright © 2019 &lt;copyright holders&gt;</div><div class="line"></div><div class="line">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</div><div class="line"></div><div class="line">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</div><div class="line"></div><div class="line">THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</div></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;YYFPSLabel&apos;, :path =&gt; &apos;./xxx/YYFPSLabel&apos;</div></pre></td></tr></table></figure><p>额外的：</p><p>//上传podspec到trunk服务器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push YYFPSLabel.podspec</div></pre></td></tr></table></figure><p>//更新本地pod依赖库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure><p>//查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search YYFPSLabel</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建podspec文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="优化" scheme="http://xuaninitial.com/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Hash(散列函数)</title>
    <link href="http://xuaninitial.com/2019/12/12/Hash-%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/"/>
    <id>http://xuaninitial.com/2019/12/12/Hash-散列函数/</id>
    <published>2019-12-12T09:04:57.000Z</published>
    <updated>2019-12-12T09:09:17.621Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p><strong>哈希表（Hash table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表</strong></p><p>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。</p></blockquote><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>数组+链表</p><blockquote><p>链表是一种物理<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83/8727749" target="_blank" rel="external">存储单元</a>上非连续、非顺序的<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/350782" target="_blank" rel="external">存储结构</a>，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313" target="_blank" rel="external">数据元素</a>的逻辑顺序是通过链表中的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304" target="_blank" rel="external">指针</a>链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="external">数据元素</a>的数据域，另一个是存储下一个结点地址的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304" target="_blank" rel="external">指针</a>域。 相比于<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081" target="_blank" rel="external">线性表</a><a href="https://baike.baidu.com/item/%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84/9845234" target="_blank" rel="external">顺序结构</a>，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</p></blockquote><h4 id="使用哈希函数通常考虑的因素有："><a href="#使用哈希函数通常考虑的因素有：" class="headerlink" title="使用哈希函数通常考虑的因素有："></a>使用哈希函数通常考虑的因素有：</h4><p>· 计算哈希函数所需时间</p><p>· 关键字的长度</p><p>· 哈希表的大小</p><p>· 关键字的分布情况</p><p>· 记录的查找频率</p><blockquote><p>直接寻址法、数字分析法、数字分析法、平方取中法、折叠法、随机数法、除留余数法</p></blockquote><h4 id="冲突与处理"><a href="#冲突与处理" class="headerlink" title="冲突与处理"></a>冲突与处理</h4><p>在哈希表中，不同的关键字值对应到同一个存储位置的现象。即关键字K1≠K2，但H（K1）= H（K2）。均匀的哈希函数可以减少冲突，但不能避免冲突。</p><p>⑴链接法（拉链法</p><blockquote><p>将具有同一散列地址的记录存储在一条线性链表中</p><p>拉链法的优点</p><p>与开放定址法相比，拉链法有如下几个优点：</p><p>①拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短；</p><p>②由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；</p><p>③开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；</p><p>④在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。</p><p> 拉链法的缺点</p><p>指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度。</p></blockquote><p>⑵开放定址法</p><blockquote><p>开放地址法有个非常关键的特征，就是所有输入的元素全部存放在哈希表里，也就是说，位桶的实现是不需要任何的链表来实现的，换句话说，也就是这个哈希表的装载因子不会超过1。它的实现是在插入一个元素的时候，先通过哈希函数进行判断，若是发生哈希冲突，就以当前地址为基准，根据再寻址的方法（探查序列），去寻找下一个地址，若发生冲突再去寻找，直至找到一个为空的地址为止。所以这种方法又称为再散列法。</p><p>常用的探查序列的方法如下：</p><p>Hi=(H(key) + di) MOD m,i=1,2，…，k(k&lt;=m-1），其中H(key）为散列函数，m为散列表长，di为增量序列：</p><p>① di=1,2,3，…，m-1，称线性探测再散列；</p><blockquote><p>冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表</p></blockquote><p>②di=1^2,-1^2,2^2,-2^2，⑶^2，…，±（k)^2,(k&lt;=m/2）称二次探测再散列；</p><blockquote><p>冲突发生时，在表的左右进行跳跃式探测，比较灵活</p></blockquote><p>③ di=伪随机数序列，称伪随机探测再散列。</p></blockquote><p>(3)再散列法</p><blockquote><p>就是再使用哈希函数去散列一个输入的时候，输出是同一个位置就再次散列，直至不发生冲突位置 <code>Hi=(H(key) + di) MOD m</code></p><p>缺点：每次冲突都要重新散列，计算时间增加。</p></blockquote><h4 id="性能-–负载因子"><a href="#性能-–负载因子" class="headerlink" title="性能 –负载因子"></a>性能 –负载因子</h4><p>这里要提到两个参数：<strong>初始容量，加载因子</strong>，这两个参数是影响hash表性能的重要参数。</p><p><strong>容量：</strong> 表示hash表中数组的长度，初始容量是创建hash表时的容量。(java默认是16)</p><p><strong>加载因子：</strong> 是hash表在其容量自动增加之前可以达到多满的一种尺度（存储元素的个数），它衡量的是一个散列表的空间的使用程度。</p><p><strong>负载因子 = 加载因子 / 容量</strong></p><p>一般情况下，当loadFactor &lt;= 1时，hash表查找的期望复杂度为O(1).</p><p>对使用链表法的散列表来说，<strong>负载因子越大，对空间的利用更充分，然后后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费</strong>。系统默认负载因子为0.75。</p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>当hash表中元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对数组进行扩容。而在数组扩容之后，最消耗性能的点就出现了，原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是<strong>扩容</strong>。</p><p>什么时候进行扩容呢？当<strong>表中元素个数</strong>(加载因子) <strong>&gt;</strong> <strong>容量 *  加载因子 </strong>时，就会进行数组扩容。</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li>冒泡排序，就是典型的O(n^2)的算法</li><li>二分查找就是O(logn)的算法</li><li>归并排序就是O(nlogn)的时间复杂度</li><li>哈希算法就是典型的O(1)时间复杂度</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;哈希表（Hash table，也叫散列表），是根据键（Key）而直接访问在内存存储位置的数据结构。
      
    
    </summary>
    
      <category term="底层" scheme="http://xuaninitial.com/categories/%E5%BA%95%E5%B1%82/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>NSDictionary底层实现</title>
    <link href="http://xuaninitial.com/2019/12/12/NSDictionary%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>http://xuaninitial.com/2019/12/12/NSDictionary底层实现/</id>
    <published>2019-12-12T08:57:49.000Z</published>
    <updated>2019-12-12T09:03:50.507Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>NSDictionary（字典）是使用 hash表来实现key和value之间的映射和存储的， hash函数设计的好坏影响着数据的查找访问效率。数据在hash表中分布的越均匀，其访问效率越高。而在Objective-C中，通常都是利用NSString 来作为键值，其内部使用的hash函数也是通过使用 NSString对象作为键值来保证数据的各个节点在hash表中均匀分布。</p></blockquote><h4 id="NSDictionary内部结构"><a href="#NSDictionary内部结构" class="headerlink" title="NSDictionary内部结构"></a>NSDictionary内部结构</h4><p><a href="https://opensource.apple.com/source/CF/CF-368/Collections.subproj/CFDictionary.c.auto.html" target="_blank" rel="external">源码地址</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __CFDictionary &#123;</div><div class="line">    <span class="built_in">CFRuntimeBase</span> _base;</div><div class="line">    <span class="built_in">CFIndex</span> _count;<span class="comment">/* number of values */</span></div><div class="line">    <span class="built_in">CFIndex</span> _capacity;<span class="comment">/* maximum number of values */</span></div><div class="line">    <span class="built_in">CFIndex</span> _bucketsNum;<span class="comment">/* number of slots */</span></div><div class="line">    uintptr_t _marker;</div><div class="line">    <span class="keyword">void</span> *_context;<span class="comment">/* private */</span></div><div class="line">    <span class="built_in">CFIndex</span> _deletes;</div><div class="line">    <span class="built_in">CFOptionFlags</span> _xflags;      <span class="comment">/* bits for GC */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">void</span> **_keys;<span class="comment">/* can be NULL if not allocated yet */</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">void</span> **_values;<span class="comment">/* can be NULL if not allocated yet */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">void CFDictionarySetValue(CFMutableDictionaryRef dict, const void *key, const void *value) &#123;</div><div class="line">    //通过match，nomatch来判断是否存在key</div><div class="line">    CFIndex match, nomatch;</div><div class="line">    const CFDictionaryKeyCallBacks *cb;</div><div class="line">    const CFDictionaryValueCallBacks *vcb;</div><div class="line">    const void *newKey, *newValue;</div><div class="line">    CFAllocatorRef allocator, keysAllocator, valuesAllocator;</div><div class="line">    CF_OBJC_FUNCDISPATCH2(__kCFDictionaryTypeID, void, dict, &quot;setObject:forKey:&quot;, value, key);</div><div class="line">    __CFGenericValidateType(dict, __kCFDictionaryTypeID);</div><div class="line">    switch (__CFDictionaryGetType(dict)) &#123;</div><div class="line">    case __kCFDictionaryMutable:</div><div class="line">if (dict-&gt;_count == dict-&gt;_capacity || NULL == dict-&gt;_keys) &#123;</div><div class="line">    __CFDictionaryGrow(dict, 1);</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">    case __kCFDictionaryFixedMutable:</div><div class="line">break;</div><div class="line">    default:</div><div class="line">CFAssert2(__CFDictionaryGetType(dict) != __kCFDictionaryImmutable, __kCFLogAssertion, &quot;%s(): immutable dict %p passed to mutating operation&quot;, __PRETTY_FUNCTION__, dict);</div><div class="line">break;</div><div class="line">    &#125;</div><div class="line">    __CFDictionaryFindBuckets2(dict, key, &amp;match, &amp;nomatch);</div><div class="line">    vcb = __CFDictionaryGetValueCallBacks(dict);</div><div class="line">    allocator = __CFGetAllocator(dict);</div><div class="line">    keysAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakKeys) ? kCFAllocatorNull : allocator;</div><div class="line">    valuesAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakValues) ? kCFAllocatorNull : allocator;</div><div class="line">    if (vcb-&gt;retain) &#123;</div><div class="line">newValue = (void *)INVOKE_CALLBACK3(((const void *(*)(CFAllocatorRef, const void *, void *))vcb-&gt;retain), allocator, value, dict-&gt;_context);</div><div class="line">    &#125; else &#123;</div><div class="line">newValue = value;</div><div class="line">    &#125;</div><div class="line">    if (kCFNotFound != match) &#123;</div><div class="line">        //key已存在，覆盖newValue</div><div class="line">CF_OBJC_KVO_WILLCHANGE(dict, key);</div><div class="line">if (vcb-&gt;release) &#123;</div><div class="line">    INVOKE_CALLBACK3(((void (*)(CFAllocatorRef, const void *, void *))vcb-&gt;release), allocator, dict-&gt;_values[match], dict-&gt;_context);</div><div class="line">&#125;</div><div class="line">CF_WRITE_BARRIER_ASSIGN(valuesAllocator, dict-&gt;_values[match], newValue);</div><div class="line">CF_OBJC_KVO_DIDCHANGE(dict, key);</div><div class="line">    &#125; else &#123;</div><div class="line">CFAssert3(__kCFDictionaryFixedMutable != __CFDictionaryGetType(dict) || dict-&gt;_count &lt; dict-&gt;_capacity, __kCFLogAssertion, &quot;%s(): capacity exceeded on fixed-capacity dict %p (capacity = %d)&quot;, __PRETTY_FUNCTION__, dict, dict-&gt;_capacity);</div><div class="line">cb = __CFDictionaryGetKeyCallBacks(dict);</div><div class="line">if (cb-&gt;retain) &#123;</div><div class="line">    newKey = (void *)INVOKE_CALLBACK3(((const void *(*)(CFAllocatorRef, const void *, void *))cb-&gt;retain), allocator, key, dict-&gt;_context);</div><div class="line">&#125; else &#123;</div><div class="line">    newKey = key;</div><div class="line">&#125;</div><div class="line">if (dict-&gt;_marker == (uintptr_t)newKey || ~dict-&gt;_marker == (uintptr_t)newKey) &#123;</div><div class="line">    __CFDictionaryFindNewMarker(dict);</div><div class="line">&#125;</div><div class="line">      // key不存在，新增value   </div><div class="line">CF_OBJC_KVO_WILLCHANGE(dict, key);</div><div class="line">CF_WRITE_BARRIER_ASSIGN(keysAllocator, dict-&gt;_keys[nomatch], newKey);</div><div class="line">CF_WRITE_BARRIER_ASSIGN(valuesAllocator, dict-&gt;_values[nomatch], newValue);</div><div class="line">dict-&gt;_count++;</div><div class="line">CF_OBJC_KVO_DIDCHANGE(dict, key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>查找key存储的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">static void __CFDictionaryFindBuckets2(CFDictionaryRef dict, const void *key, CFIndex *match, CFIndex *nomatch) &#123;</div><div class="line">    const CFDictionaryKeyCallBacks *cb = __CFDictionaryGetKeyCallBacks(dict);</div><div class="line">    //获取hash值</div><div class="line">    CFHashCode keyHash = cb-&gt;hash ? (CFHashCode)INVOKE_CALLBACK2(((CFHashCode (*)(const void *, void *))cb-&gt;hash), key, dict-&gt;_context) : (CFHashCode)key;</div><div class="line">    const void **keys = dict-&gt;_keys;</div><div class="line">    uintptr_t marker = dict-&gt;_marker;</div><div class="line">    CFIndex probe = keyHash % dict-&gt;_bucketsNum;</div><div class="line">    CFIndex probeskip = 1;// See RemoveValue() for notes before changing this value</div><div class="line">    CFIndex start = probe;</div><div class="line">    *match = kCFNotFound;</div><div class="line">    *nomatch = kCFNotFound;</div><div class="line">    for (;;) &#123;</div><div class="line">uintptr_t currKey = (uintptr_t)keys[probe];</div><div class="line">       //  空桶，返回nomatch，未匹配</div><div class="line">if (marker == currKey) &#123;/* empty */</div><div class="line">    if (nomatch) *nomatch = probe;</div><div class="line">    return;</div><div class="line">&#125; else if (~marker == currKey) &#123;/* deleted */</div><div class="line">    if (nomatch) &#123;</div><div class="line">*nomatch = probe;</div><div class="line">nomatch = NULL;</div><div class="line">    &#125;</div><div class="line">&#125; else if (currKey == (uintptr_t)key || (cb-&gt;equal &amp;&amp; INVOKE_CALLBACK3((Boolean (*)(const void *, const void *, void*))cb-&gt;equal, (void *)currKey, key, dict-&gt;_context))) &#123;</div><div class="line">        // 匹配成功，返回match</div><div class="line">    *match = probe;</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">     // 未匹配，发生碰撞，将数组下标后移，直到找到空闲区域位置</div><div class="line">probe = probe + probeskip;</div><div class="line">    //探针％存储桶的此替代方法假定probeskip始终为正且小于存储桶数。</div><div class="line">if (dict-&gt;_bucketsNum &lt;= probe) &#123;</div><div class="line">    probe -= dict-&gt;_bucketsNum;</div><div class="line">&#125;</div><div class="line">if (start == probe) &#123;</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过源码可以看到，当有重复的key插入到字典NSDictionary时，会覆盖旧值，而集合NSSet则什么都不做，保证了里面的元素不会重复。</p><p>大家都知道，字典里的键值对key-value是一一对应的关系，从数据结构可以看出，key和value是分别存储在两个不同的数组里，这里面是如何对key、value进行绑定的呢？</p><p>首先<strong>key利用hash函数算出hash值，然后对数组的长度取模，得到数组下标的位置，同样将这个地址对应到values数组的下标，就匹配到相应的value</strong>。 注意到上面的这句话，要保证一点，就是<strong>keys和values这两个数组的长度要一致</strong>。所以扩容的时候，需要对keys和values两个数组一起扩容。</p><p>// setValue时判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">void CFDictionarySetValue(CFMutableDictionaryRef dict, const void *key, const void *value) &#123;</div><div class="line">    CFIndex match, nomatch;</div><div class="line">    const CFDictionaryKeyCallBacks *cb;</div><div class="line">    const CFDictionaryValueCallBacks *vcb;</div><div class="line">    const void *newKey, *newValue;</div><div class="line">    CFAllocatorRef allocator, keysAllocator, valuesAllocator;</div><div class="line">    CF_OBJC_FUNCDISPATCH2(__kCFDictionaryTypeID, void, dict, &quot;setObject:forKey:&quot;, value, key);</div><div class="line">    __CFGenericValidateType(dict, __kCFDictionaryTypeID);</div><div class="line">    switch (__CFDictionaryGetType(dict)) &#123;</div><div class="line">    case __kCFDictionaryMutable:</div><div class="line">      //判断</div><div class="line">if (dict-&gt;_count == dict-&gt;_capacity || NULL == dict-&gt;_keys) &#123;</div><div class="line">    __CFDictionaryGrow(dict, 1);</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">    case __kCFDictionaryFixedMutable:</div><div class="line">break;</div><div class="line">    default:</div><div class="line">CFAssert2(__CFDictionaryGetType(dict) != __kCFDictionaryImmutable, __kCFLogAssertion, &quot;%s(): immutable dict %p passed to mutating operation&quot;, __PRETTY_FUNCTION__, dict);</div><div class="line">break;</div><div class="line">    &#125;</div><div class="line">    __CFDictionaryFindBuckets2(dict, key, &amp;match, &amp;nomatch);</div><div class="line">    vcb = __CFDictionaryGetValueCallBacks(dict);</div><div class="line">    allocator = __CFGetAllocator(dict);</div><div class="line">    keysAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakKeys) ? kCFAllocatorNull : allocator;</div><div class="line">    valuesAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakValues) ? kCFAllocatorNull : allocator;</div><div class="line">    if (vcb-&gt;retain) &#123;</div><div class="line">newValue = (void *)INVOKE_CALLBACK3(((const void *(*)(CFAllocatorRef, const void *, void *))vcb-&gt;retain), allocator, value, dict-&gt;_context);</div><div class="line">    &#125; else &#123;</div><div class="line">newValue = value;</div><div class="line">    &#125;</div><div class="line">    if (kCFNotFound != match) &#123;</div><div class="line">CF_OBJC_KVO_WILLCHANGE(dict, key);</div><div class="line">if (vcb-&gt;release) &#123;</div><div class="line">    INVOKE_CALLBACK3(((void (*)(CFAllocatorRef, const void *, void *))vcb-&gt;release), allocator, dict-&gt;_values[match], dict-&gt;_context);</div><div class="line">&#125;</div><div class="line">CF_WRITE_BARRIER_ASSIGN(valuesAllocator, dict-&gt;_values[match], newValue);</div><div class="line">CF_OBJC_KVO_DIDCHANGE(dict, key);</div><div class="line">    &#125; else &#123;</div><div class="line">CFAssert3(__kCFDictionaryFixedMutable != __CFDictionaryGetType(dict) || dict-&gt;_count &lt; dict-&gt;_capacity, __kCFLogAssertion, &quot;%s(): capacity exceeded on fixed-capacity dict %p (capacity = %d)&quot;, __PRETTY_FUNCTION__, dict, dict-&gt;_capacity);</div><div class="line">cb = __CFDictionaryGetKeyCallBacks(dict);</div><div class="line">if (cb-&gt;retain) &#123;</div><div class="line">    newKey = (void *)INVOKE_CALLBACK3(((const void *(*)(CFAllocatorRef, const void *, void *))cb-&gt;retain), allocator, key, dict-&gt;_context);</div><div class="line">&#125; else &#123;</div><div class="line">    newKey = key;</div><div class="line">&#125;</div><div class="line">if (dict-&gt;_marker == (uintptr_t)newKey || ~dict-&gt;_marker == (uintptr_t)newKey) &#123;</div><div class="line">    __CFDictionaryFindNewMarker(dict);</div><div class="line">&#125;</div><div class="line">CF_OBJC_KVO_WILLCHANGE(dict, key);</div><div class="line">CF_WRITE_BARRIER_ASSIGN(keysAllocator, dict-&gt;_keys[nomatch], newKey);</div><div class="line">CF_WRITE_BARRIER_ASSIGN(valuesAllocator, dict-&gt;_values[nomatch], newValue);</div><div class="line">dict-&gt;_count++;</div><div class="line">CF_OBJC_KVO_DIDCHANGE(dict, key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>//扩容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">static void __CFDictionaryGrow(CFMutableDictionaryRef dict, CFIndex numNewValues) &#123;</div><div class="line">    //保存旧的值</div><div class="line">    const void **oldkeys = dict-&gt;_keys;</div><div class="line">    const void **oldvalues = dict-&gt;_values;</div><div class="line">    CFIndex idx, oldnbuckets = dict-&gt;_bucketsNum;</div><div class="line">    CFIndex oldCount = dict-&gt;_count;</div><div class="line">    CFAllocatorRef allocator = __CFGetAllocator(dict), keysAllocator, valuesAllocator;</div><div class="line">    void *keysBase, *valuesBase;</div><div class="line">    dict-&gt;_capacity = __CFDictionaryRoundUpCapacity(oldCount + numNewValues);</div><div class="line">    dict-&gt;_bucketsNum = __CFDictionaryNumBucketsForCapacity(dict-&gt;_capacity);</div><div class="line">    dict-&gt;_deletes = 0;</div><div class="line">    if (_CFDictionaryIsSplit(dict)) &#123;   // iff GC, use split memory sometimes unscanned memory</div><div class="line">unsigned weakOrStrong = (dict-&gt;_xflags &amp; __kCFDictionaryWeakKeys) ? AUTO_MEMORY_UNSCANNED : AUTO_MEMORY_SCANNED;</div><div class="line">void *mem = _CFAllocatorAllocateGC(allocator, dict-&gt;_bucketsNum * sizeof(const void *), weakOrStrong);</div><div class="line">        CF_WRITE_BARRIER_BASE_ASSIGN(allocator, dict, dict-&gt;_keys, mem);</div><div class="line">        keysAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakKeys) ? kCFAllocatorNull : allocator;  // GC: avoids write-barrier in weak case.</div><div class="line">        keysBase = mem;</div><div class="line"></div><div class="line">        weakOrStrong = (dict-&gt;_xflags &amp; __kCFDictionaryWeakValues) ? AUTO_MEMORY_UNSCANNED : AUTO_MEMORY_SCANNED;</div><div class="line">mem = _CFAllocatorAllocateGC(allocator, dict-&gt;_bucketsNum * sizeof(const void *), weakOrStrong);</div><div class="line">        CF_WRITE_BARRIER_BASE_ASSIGN(allocator, dict, dict-&gt;_values, mem);</div><div class="line">        valuesAllocator = (dict-&gt;_xflags &amp; __kCFDictionaryWeakValues) ? kCFAllocatorNull : allocator; // GC: avoids write-barrier in weak case.</div><div class="line">        valuesBase = mem;</div><div class="line">    &#125; else &#123;</div><div class="line">        CF_WRITE_BARRIER_BASE_ASSIGN(allocator, dict, dict-&gt;_keys, _CFAllocatorAllocateGC(allocator, 2 * dict-&gt;_bucketsNum * sizeof(const void *), AUTO_MEMORY_SCANNED));</div><div class="line">        dict-&gt;_values = (const void **)(dict-&gt;_keys + dict-&gt;_bucketsNum);</div><div class="line">        keysAllocator = valuesAllocator = allocator;</div><div class="line">        keysBase = valuesBase = dict-&gt;_keys;</div><div class="line">    &#125;</div><div class="line">    if (NULL == dict-&gt;_keys || NULL == dict-&gt;_values) HALT;</div><div class="line">    if (__CFOASafe) __CFSetLastAllocationEventName(dict-&gt;_keys, &quot;CFDictionary (store)&quot;);</div><div class="line">    // 重新计算keys数据的hash值，存放到新的数组中</div><div class="line">    for (idx = dict-&gt;_bucketsNum; idx--;) &#123;</div><div class="line">        dict-&gt;_keys[idx] = (const void *)dict-&gt;_marker;</div><div class="line">        dict-&gt;_values[idx] = 0;</div><div class="line">    &#125;</div><div class="line">    if (NULL == oldkeys) return;</div><div class="line">    </div><div class="line">    for (idx = 0; idx &lt; oldnbuckets; idx++) &#123;</div><div class="line">        if (dict-&gt;_marker != (uintptr_t)oldkeys[idx] &amp;&amp; ~dict-&gt;_marker != (uintptr_t)oldkeys[idx]) &#123;</div><div class="line">            CFIndex match, nomatch;</div><div class="line">            __CFDictionaryFindBuckets2(dict, oldkeys[idx], &amp;match, &amp;nomatch);</div><div class="line">            CFAssert3(kCFNotFound == match, __kCFLogAssertion, &quot;%s(): two values (%p, %p) now hash to the same slot; mutable value changed while in table or hash value is not immutable&quot;, __PRETTY_FUNCTION__, oldkeys[idx], dict-&gt;_keys[match]);</div><div class="line">            if (kCFNotFound != nomatch) &#123;</div><div class="line">                CF_WRITE_BARRIER_BASE_ASSIGN(keysAllocator, keysBase, dict-&gt;_keys[nomatch], oldkeys[idx]);</div><div class="line">                CF_WRITE_BARRIER_BASE_ASSIGN(valuesAllocator, valuesBase, dict-&gt;_values[nomatch], oldvalues[idx]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    CFAssert1(dict-&gt;_count == oldCount, __kCFLogAssertion, &quot;%s(): dict count differs after rehashing; error&quot;, __PRETTY_FUNCTION__);</div><div class="line">    _CFAllocatorDeallocateGC(allocator, oldkeys);</div><div class="line">    if (_CFDictionaryIsSplit(dict)) _CFAllocatorDeallocateGC(allocator, oldvalues);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面可以看出，字典把无序和庞大的数据进行了空间hash表对应，下次查找的复杂度接近于O(1)，但是不断扩容的空间就是其弊端，因此开放地址法最好存储的是临时需要，尽快的释放资源。</p><p><strong>对于字典NSDictionary设置的key和value，key值会根据特定的hash函数算出hash值，keys和values同样多，利用hash值对数组长度取模，得到其对应的下标index，如果下标已有数据，开放定址法后移插入，如果数组达到阈值，就扩容，然后重新hash插入。这样的机制就把一些不连续的key-value值插入到能建立起关系的hash表中。</strong><br> <strong>查找的时候，key根据hash函数以及数组长度，得到下标，然后根据下标直接访问hash表的keys和values，这样查询速度就可以和连续线性存储的数据一样接近O(1)了。</strong></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)anObject forKey:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)aKey;</div></pre></td></tr></table></figure><blockquote><p>要作为Key值，必须遵循NSCopying协议。也就是说在NSDictionary内部，会对aKey对象Copy一份新的。而anObject 对象在其内部是作为强引用（retain或strong)。所以在MRC下，向该方法发送消息之后，我们会向anObject发送release消息进行释放。</p><p>既然知道了作为key值，必须遵循NSCopying协议，说明除了NSString对象之外，我们还可以使用其他类型对象来作为NSDictionary的 key值。不过这还不够，作为key值，该类型还必须继承于NSObject并且要重载一下两个方法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (NSUInteger)hash;  </div><div class="line">- (BOOL)isEqual:(id)object;</div></pre></td></tr></table></figure><blockquote><p>其中，hash 方法是用来计算该对象的 hash 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。所以同样，如果想重写该方法，我们尽量设计一个能让数据分布均匀的 hash 函数。</p><p><strong>所以如果对象key的hash值相同，那在hash表里面的对应的value值是相同的</strong>(value值被更新了)</p><p>isEqual方法是为了通过hash值来找到对象在hash表中的位置。</p></blockquote><ul><li>NSDictionary的KVC实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@implementation NSDictionary (NSKeyValueCoding)</div><div class="line">- (id)valueForKey:(NSString*)key &#123;</div><div class="line">    if([key hasPrefix:@&quot;@&quot;])</div><div class="line">        return [super valueForKey:[key substringFromIndex:1]];</div><div class="line">    return [self objectForKey:key];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setValue:(id)value forKey:(NSString*)key &#123;</div><div class="line">    [NSException raise:NSInvalidArgumentException format:@&quot;%@ called on immutable dictionary %@&quot;, NSStringFromSelector(_cmd), self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation NSMutableDictionary (NSKeyValueCoding)</div><div class="line"></div><div class="line">- (void)setValue:(id)value forKey:(NSString*)key &#123;</div><div class="line">    if(value)</div><div class="line">        [self setObject:value forKey:key];</div><div class="line">    else</div><div class="line">        [self removeObjectForKey:key];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><ul><li>setValue和setObject的区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)setObject:(ObjectType)anObject forKey:(KeyType &lt;NSCopying&gt;)aKey;</div><div class="line">- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;</div></pre></td></tr></table></figure><p><code>setObject: ForKey</code>:是NSMutableDictionary特有的；<code>setValue: ForKey:</code>是KVC的主要方法。</p><blockquote><p>(1) setValue: ForKey:的value是可以为nil的（但是当value为nil的时候，会自动调用removeObject：forKey方法）；<br> setObject: ForKey:的value则不可以为nil。</p><p> (2) setValue: ForKey:的key必须是不为nil的字符串类型；</p><p>setObject: ForKey:的key可以是不为nil的所有继承NSCopying的类型。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;NSDictionary（字典）是使用 hash表来实现key和value之间的映射和存储的， hash函数设计的
      
    
    </summary>
    
      <category term="底层" scheme="http://xuaninitial.com/categories/%E5%BA%95%E5%B1%82/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Flutter跳转原生页面</title>
    <link href="http://xuaninitial.com/2019/03/30/Flutter%E8%B7%B3%E8%BD%AC%E5%8E%9F%E7%94%9F%E9%A1%B5%E9%9D%A2/"/>
    <id>http://xuaninitial.com/2019/03/30/Flutter跳转原生页面/</id>
    <published>2019-03-30T07:08:42.000Z</published>
    <updated>2019-03-30T07:46:58.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题记</strong></p><p>Flutter毕竟刚开始一年，有些功能需要原生来实现。如下主要实现Flutter跳转原生页面</p><p><strong>Flutter中写一个类</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</div><div class="line"></div><div class="line"><span class="comment">//设定唯一标识</span></div><div class="line"><span class="keyword">const</span> MethodChannel _methodChannel =</div><div class="line">    MethodChannel(<span class="string">'plugins.flutter.io/goToNative_method'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipPluginUtil</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">void</span> skipPage() &#123;</div><div class="line">  <span class="comment">//设定方法名</span></div><div class="line">    _methodChannel.invokeMethod(<span class="string">"goNativePage"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SkipPluginUtil.skipPage();</div></pre></td></tr></table></figure><p><strong>iOS</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application</div><div class="line">    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    </div><div class="line">    FlutterViewController *controller = (FlutterViewController *)self.window.rootViewController;</div><div class="line">    //取到唯一标识</div><div class="line">    FlutterMethodChannel *channel = [FlutterMethodChannel methodChannelWithName:@&quot;plugins.flutter.io/goToNative_method&quot; binaryMessenger:controller];</div><div class="line">    </div><div class="line">    [channel setMethodCallHandler:^(FlutterMethodCall * _Nonnull call, FlutterResult  _Nonnull result) &#123;</div><div class="line">       //寻找对应的方法名</div><div class="line">        if ([call.method isEqualToString:@&quot;goNativePage&quot;]) &#123;</div><div class="line">           </div><div class="line">            </div><div class="line">            [controller presentViewController:[FirstViewController new] animated:YES completion:nil];</div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;else&#123;</div><div class="line"></div><div class="line">            NSLog(@&quot;%@&quot;,[FlutterError errorWithCode:@&quot;-1&quot; message:@&quot;&quot; details:@&quot;&quot;]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line">  [GeneratedPluginRegistrant registerWithRegistry:self];</div><div class="line">  // Override point for customization after application launch.</div><div class="line">  return [super application:application didFinishLaunchingWithOptions:launchOptions];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Android</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipPlugin</span> <span class="keyword">implements</span> <span class="title">MethodChannel</span>.<span class="title">MethodCallHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Activity activity;</div><div class="line">    <span class="comment">//取到唯一标识</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_METHED = <span class="string">"plugins.flutter.io/goToNative_method"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SkipPlugin</span><span class="params">(Activity context)</span> </span>&#123;</div><div class="line">        activity = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWith</span><span class="params">(PluginRegistry.Registrar registrar)</span> </span>&#123;</div><div class="line">        MethodChannel channel = <span class="keyword">new</span> MethodChannel(registrar.messenger(), CHANNEL_METHED);</div><div class="line">        SkipPlugin skipPlugin = <span class="keyword">new</span> SkipPlugin(registrar.activity());</div><div class="line">        channel.setMethodCallHandler(skipPlugin);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall methodCall, MethodChannel.Result result)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">switch</span> (methodCall.method) &#123;</div><div class="line">            <span class="comment">//找到对应方法</span></div><div class="line">                <span class="keyword">case</span> <span class="string">"goNativePage"</span>: &#123;</div><div class="line">                    activity.startActivity(<span class="keyword">new</span> Intent(activity, Main2Activity.class));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            result.error(<span class="string">"IOException encountered"</span>, methodCall.method, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>额外篇判断iOS还是Android</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(Platform.isIOS)&#123;<span class="comment">//iOS</span></div><div class="line">      </div><div class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Platform.isAndroid)&#123; <span class="comment">//Android</span></div><div class="line">     </div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flutter毕竟刚开始一年，有些功能需要原生来实现。如下主要实现Flutter跳转原生页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flutter中写一个类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Flutter" scheme="http://xuaninitial.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://xuaninitial.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>electra 越狱</title>
    <link href="http://xuaninitial.com/2019/02/26/electra-%E8%B6%8A%E7%8B%B1/"/>
    <id>http://xuaninitial.com/2019/02/26/electra-越狱/</id>
    <published>2019-02-26T03:33:10.000Z</published>
    <updated>2019-02-26T08:32:57.071Z</updated>
    
    <content type="html"><![CDATA[<p><strong>设备信息</strong></p><p>iPhone 6s ,系统11.3</p><p><strong>越狱前准备</strong></p><p>1、备份手机内容</p><p>2、删除下载的系统更新OTA</p><p><strong>安装Electra</strong></p><p>方法1：下载<a href="https://github.com/coolstar/electra1131" target="_blank" rel="external">源码</a> 编译直接安装</p><p>方法2：下载手机对应版本的 <a href="https://github.com/coolstar/electra-ipas" target="_blank" rel="external">.ipa</a> （我这边用的是11.3）， 用MonkeyApp新建一个项目运行安装（一个重签名的过程）</p><img src="/2019/02/26/electra-越狱/1.jpg" alt="1.jpg" title=""><p><strong>越狱</strong></p><p>打开electra  手机切换到飞行模式   点击Jailbreak 等待重启越狱</p><p>然后你的桌面上就会有Cydia图标</p><img src="/2019/02/26/electra-越狱/2.jpg" alt="2.jpg" title=""><p>问题：</p><p>打开Cydia 提示 <strong>无法加载</strong>（似乎已断开与互联网的链接）</p><img src="/2019/02/26/electra-越狱/3.jpg" alt="3.jpg" title=""><p>解决方法：</p><p>挂v  打开，点击右上角重新加载</p><p>参考：</p><p><a href="https://coolstar.org/electra/" target="_blank" rel="external">Electra官网</a></p><p><a href="https://github.com/coolstar/electra1131" target="_blank" rel="external">11.0 - 11.3.1</a></p><p><a href="https://github.com/coolstar/electra" target="_blank" rel="external">11.0 - 11.1.2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;设备信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iPhone 6s ,系统11.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;越狱前准备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、备份手机内容&lt;/p&gt;
&lt;p&gt;2、删除下载的系统更新OTA&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装Elect
      
    
    </summary>
    
      <category term="iOSni" scheme="http://xuaninitial.com/categories/iOSni/"/>
    
    
      <category term="iOSni" scheme="http://xuaninitial.com/tags/iOSni/"/>
    
  </entry>
  
  <entry>
    <title>flutter upgrade  报错424</title>
    <link href="http://xuaninitial.com/2019/02/26/flutter-upgrade-%E6%8A%A5%E9%94%99424/"/>
    <id>http://xuaninitial.com/2019/02/26/flutter-upgrade-报错424/</id>
    <published>2019-02-26T02:28:05.000Z</published>
    <updated>2019-02-26T02:51:46.645Z</updated>
    
    <content type="html"><![CDATA[<p>执行更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flutter upgrade</div></pre></td></tr></table></figure><p>报错如下：</p><p>This is an unexpected error. Please run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pub --trace upgrade --verbosity=error --no-packages-dir</div></pre></td></tr></table></figure><p>and include the logs in an issue on <a href="https://github.com/dart-lang/pub/issues/new" target="_blank" rel="external">https://github.com/dart-lang/pub/issues/new</a><br>Error: Unable to ‘pub upgrade’ flutter tool. Retrying in five seconds… (1 tries left)<br>Command ‘pub upgrade’ still failed after 10 tries, giving up.</p><p>解决方式：</p><p>卸载flutter SDK 重新安装 </p><p>//配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source .bash_profile</div></pre></td></tr></table></figure><p>//下载SDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -b dev https://github.com/flutter/flutter.git</div></pre></td></tr></table></figure><p>//配置SDK的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=&quot;$PWD/flutter/bin:$PATH&quot;</div></pre></td></tr></table></figure><p> 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ./flutter</div><div class="line">flutter doctor</div></pre></td></tr></table></figure><p><strong>备注：</strong>执行flutter doctor的时候，可能会报上面同样的错误，耐心等待一下，挂梯子，重新执行</p><p>xcode工具链有问题的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">        brew uninstall --ignore-dependencies libimobiledevice</div><div class="line">        brew uninstall --ignore-dependencies usbmuxd</div><div class="line">        brew install --HEAD usbmuxd</div><div class="line">        brew unlink usbmuxd</div><div class="line">        brew link usbmuxd</div><div class="line">        brew install --HEAD libimobiledevice</div><div class="line">        brew install ideviceinstaller</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行更新：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
      <category term="Flutter" scheme="http://xuaninitial.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://xuaninitial.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>2018年终总结</title>
    <link href="http://xuaninitial.com/2019/01/17/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://xuaninitial.com/2019/01/17/2018年终总结/</id>
    <published>2019-01-17T07:13:27.000Z</published>
    <updated>2019-01-17T07:19:44.504Z</updated>
    
    <content type="html"><![CDATA[<p>​    作为程序员，到年底都会进行一次自我反思或者总结，回过头来看看这一年自    己成长了多少。</p><p>​    18年忙忙碌碌的一年。4月份之前一直在出差，博客都没怎么更新导致今年的产出有点少8篇</p><p>​    5~7月一段颓废期（生活方面导致）</p><p>​    7月以后回归正常</p><h4 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h4><p>​    swift 系统的学习了一遍，有自己的项目，也改写了一部分公司的项目</p><p>​       逆向视频完整的看完了，了解了工具的使用，对App的逆向调试模式的思考，缺        少实践</p><p>​    flutter年底了刚开始学习</p><p>​    被朋友吐槽字写的难看苦练两个多月（有点效果吧，起码写的自己认识）    </p><h4 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h4><p>《解忧杂货铺》</p><blockquote><p>我们总是在选择，也总是在犹豫，其实我们自己心中已经有答案，跟着感觉走就可以了</p></blockquote><p>《拉普拉斯的魔女》 </p><blockquote><p>有时候未知也是一种幸福</p></blockquote><p>《地铁异事薄》</p><blockquote><p>书名不错</p></blockquote><p>《活着》–余华</p><blockquote><p>活着就有希望</p></blockquote><p>《眨眼之间》</p><blockquote><p>在自己擅长的领域，一眨眼做出的决定，可能和三思后行的结果一样 </p></blockquote><p>《番茄工作法图解》</p><blockquote><p>专注一件事情，合理的安排时间</p></blockquote><p>《正向沟通—— 非暴力人际沟通技巧》暂未看完</p><h4 id="2019-计划"><a href="#2019-计划" class="headerlink" title="2019 计划"></a>2019 计划</h4><ul><li>坚持博客一个月最少更新一次</li><li>继续输出开源社区，保持 GitHub 活跃；</li><li>读书；</li><li>技术积累(swift、逆向、flutter、html、算法相关的)</li></ul><p>  祝万事胜意，得偿所愿</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    作为程序员，到年底都会进行一次自我反思或者总结，回过头来看看这一年自    己成长了多少。&lt;/p&gt;
&lt;p&gt;​    18年忙忙碌碌的一年。4月份之前一直在出差，博客都没怎么更新导致今年的产出有点少8篇&lt;/p&gt;
&lt;p&gt;​    5~7月一段颓废期（生活方面导致）&lt;/
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://xuaninitial.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>error: Multiple commands produce及解决方法</title>
    <link href="http://xuaninitial.com/2018/10/19/error-Multiple-commands-produce%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://xuaninitial.com/2018/10/19/error-Multiple-commands-produce及解决方法/</id>
    <published>2018-10-19T07:57:04.000Z</published>
    <updated>2018-10-19T11:55:36.458Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/19/error-Multiple-commands-produce及解决方法/1.jpeg" alt="1.jpeg" title=""><p>错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">error: Multiple commands produce &apos;/Users/initial/Library/Developer/Xcode/DerivedData/Glaucus-cwggsmqkalmsxmhgdmywvbdfjqsz/Build/Products/Debug-iphoneos/Glaucus.app&apos;:</div><div class="line"></div><div class="line">1) Target &apos;Glaucus&apos; has create directory command with output &apos;/Users/initial/Library/Developer/Xcode/DerivedData/Glaucus-cwggsmqkalmsxmhgdmywvbdfjqsz/Build/Products/Debug-iphoneos/Glaucus.app&apos;</div><div class="line"></div><div class="line">2) That command depends on command in Target &apos;Glaucus&apos;: script phase “[CP] Copy Pods Resources”</div></pre></td></tr></table></figure><p>解决方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> 修改build system</div><div class="line"></div><div class="line">1、在Xcode菜单栏 -&gt; File -&gt; Workspace Setting，将build system修改为legacy build system，</div><div class="line">2、然后clean后编译。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/10/19/error-Multiple-commands-produce及解决方法/1.jpeg&quot; alt=&quot;1.jpeg&quot; title=&quot;&quot;&gt;
&lt;p&gt;错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="Question" scheme="http://xuaninitial.com/categories/Question/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title> Container类型crash防护（Container）</title>
    <link href="http://xuaninitial.com/2018/08/25/Container%E7%B1%BB%E5%9E%8Bcrash%E9%98%B2%E6%8A%A4%EF%BC%88Container%EF%BC%89/"/>
    <id>http://xuaninitial.com/2018/08/25/Container类型crash防护（Container）/</id>
    <published>2018-08-25T12:51:31.000Z</published>
    <updated>2018-08-25T12:59:18.911Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Container crash 产生原因</strong></p><p>Container 类型的crash 指的是容器类的crash，常见的有NSArray／NSMutableArray／NSDictionary／NSMutableDictionary／NSCache的crash。 一些常见的越界，插入nil，等错误操作均会导致此类crash发生。 由于产生的原因比较简单，就不展开来描述了。</p><p>该类crash虽然比较容易排查，但是其在app crash概率总比还是挺高，所以有必要对其进行防护。</p><p><strong>Container crash 防护方案</strong></p><p>Container crash 类型的防护方案也比较简单，针对于NSArray／NSMutableArray／NSDictionary／NSMutableDictionary／NSCache的一些常用的会导致崩溃的API进行method swizzling，然后在swizzle的新方法中加入一些条件限制和判断，从而让这些API变的安全如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[self swizzlingInstance:objc_getClass(&quot;__NSPlaceholderDictionary&quot;) orginalMethod:@selector(initWithObjects:forKeys:count:) replaceMethod:NSSelectorFromString(@&quot;qiye_initWithObjects:forKeys:count:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSPlaceholderDictionary&quot;) orginalMethod:@selector(dictionaryWithObjects:forKeys:count:) replaceMethod:NSSelectorFromString(@&quot;qiye_dictionaryWithObjects:forKeys:count:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSDictionaryM&quot;) orginalMethod:@selector(setObject:forKey:) replaceMethod:NSSelectorFromString(@&quot;qiye_setObject:forKey:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSPlaceholderArray&quot;) orginalMethod:@selector(initWithObjects:count:) replaceMethod:NSSelectorFromString(@&quot;qiye_initWithObjects:count:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSArrayI&quot;) orginalMethod:@selector(objectAtIndex:) replaceMethod:NSSelectorFromString(@&quot;qiye_objectAtIndex:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSArrayM&quot;) orginalMethod:@selector(addObject:) replaceMethod:NSSelectorFromString(@&quot;qiye_addObject:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSArrayM&quot;) orginalMethod:@selector(insertObject:atIndex:) replaceMethod:NSSelectorFromString(@&quot;qiye_insertObject:atIndex:&quot;)];</div><div class="line">       </div><div class="line">       [self swizzlingInstance:objc_getClass(&quot;__NSArrayM&quot;) orginalMethod:@selector(objectAtIndex:) replaceMethod:NSSelectorFromString(@&quot;qiye_objectAtIndex:&quot;)];</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">+(BOOL)swizzlingInstance:(Class)clz orginalMethod:(SEL)originalSelector  replaceMethod:(SEL)replaceSelector&#123;</div><div class="line"></div><div class="line">    Method original = class_getInstanceMethod(clz, originalSelector);</div><div class="line">    Method replace = class_getInstanceMethod(clz, replaceSelector);</div><div class="line">    BOOL didAddMethod =</div><div class="line">    class_addMethod(clz,</div><div class="line">                    originalSelector,</div><div class="line">                    method_getImplementation(replace),</div><div class="line">                    method_getTypeEncoding(replace));</div><div class="line">    </div><div class="line">    if (didAddMethod) &#123;</div><div class="line">        class_replaceMethod(clz,</div><div class="line">                            replaceSelector,</div><div class="line">                            method_getImplementation(original),</div><div class="line">                            method_getTypeEncoding(original));</div><div class="line">    &#125; else &#123;</div><div class="line">        method_exchangeImplementations(original, replace);</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Container crash 产生原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Container 类型的crash 指的是容器类的crash，常见的有NSArray／NSMutableArray／NSDictionary／NSMutableDictionary／
      
    
    </summary>
    
      <category term="Crash" scheme="http://xuaninitial.com/categories/Crash/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="Crash" scheme="http://xuaninitial.com/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Crash问题总结与防护--Key-Value-Observing(KVO)Crash</title>
    <link href="http://xuaninitial.com/2018/07/23/Crash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E4%B8%8E%E9%98%B2%E6%8A%A4-Key-Value-Observing-KVO-Crash/"/>
    <id>http://xuaninitial.com/2018/07/23/Crash问题总结与防护-Key-Value-Observing-KVO-Crash/</id>
    <published>2018-07-23T10:01:17.000Z</published>
    <updated>2018-07-24T09:34:14.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong>KVO介绍</strong></p><blockquote><p>KVO（Key-Value Observing),键值监听。它提供一种机制：指定的被观察者的属性被改变后，KVO就会通知观察者，观察者可以做出响应。</p><p>KVO作用：利用KVO，很容易实现视图组件和数据模型的分离。当数据模型的属性值改变之后，作为监听者的视图组件就会被激发。这有利于业务逻辑和视图展示的解耦合。</p><p>KVO使用步骤：（1）注册观察，添加观察者及属性；（2）实现回调方法；（3）移除观察。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//注册观察者</div><div class="line">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//回调方法</div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//移除观察者</div><div class="line">- (void)removeObserver:(NSObject *)anObserver forKeyPath:(NSString *)keyPath</div><div class="line">  - (void)removeObserver:(NSObject *)observer     forKeyPath:(NSString *)keyPath  context:(void *)context</div></pre></td></tr></table></figure><p><strong>产生原因</strong></p><p>（1）不能对不存在的属性进行kvo观测，否则会报Crash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uncaught exception &apos;NSUnknownKeyException&apos;, reason: &apos;[&lt;SettingData 0x600000203d50&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key stockName.&apos;</div></pre></td></tr></table></figure><p>（2）观察者必须实现 observeValueForKeyPath:ofObject:change:context:方法，否则Crash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Terminating app due to uncaught exception &apos;NSInternalInconsistencyException&apos;, reason: &apos;&lt;SettingController: 0x7f811372ff70&gt;: An -observeValueForKeyPath:ofObject:change:context: message was received but not handled.</div></pre></td></tr></table></figure><p>(3) 移除观察，超过addObserver的次数就会 Crash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Terminating app due to uncaught exception &apos;NSRangeException&apos;, reason: &apos;Cannot remove an observer &lt;SettingController 0x7ff8e8703100&gt; for the key path &quot;price&quot; from &lt;SettingData 0x60800003d000&gt; because it is not registered as an observer.&apos;</div></pre></td></tr></table></figure><p><strong>防护方案</strong></p><p>　可以让被观察对象持有一个KVO的delegate，所有和KVO相关的操作均通过delegate来进行管理，delegate通过建立一张map来维护KVO整个关系。</p><p>中间层delegate的代理工作：</p><p>（1）如果出现KVO重复添加观察者或者重复移除观察者（KVO注册观察者与移除观察者不匹配）的情况，delegate可以直接阻止这些非正常的操作。</p><p>（2）被观察者dealloc之前，可以通过delegate自动将与自己有关的KVO关系都注销掉，避免了KVO的被观察者dealloc时仍然注册着KVO导致的crash。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;KVO介绍&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KVO（Key-Value Observing),键值监听。它提供一种机制：指定的被观察者的属性被改变后，KVO就会通知观察者，观察者可以做出响应。&lt;/p&gt;
&lt;p&gt;KVO作用：利用KVO，
      
    
    </summary>
    
      <category term="Crash" scheme="http://xuaninitial.com/categories/Crash/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="Crash" scheme="http://xuaninitial.com/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Crash问题总结与防护--NSNotification Crash</title>
    <link href="http://xuaninitial.com/2018/07/23/Crash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E4%B8%8E%E9%98%B2%E6%8A%A4-NSNotification-Crash/"/>
    <id>http://xuaninitial.com/2018/07/23/Crash问题总结与防护-NSNotification-Crash/</id>
    <published>2018-07-23T09:52:13.000Z</published>
    <updated>2018-07-24T09:35:00.400Z</updated>
    
    <content type="html"><![CDATA[<p><strong>产生原因</strong></p><p>注册观察者后，没有在观察者dealloc时及时注销观察者，极有可能通知中心再发送通知时发送给僵尸对象而发生Crash。（iOS9以后不会Crash）</p><p><strong>防护方案</strong></p><p>在宿主释放过程中嵌入我们自己的对象，使得宿主释放时顺带将我们的对象一起释放掉，从而获取dealloc的时机点</p><p><strong>实现</strong></p><blockquote><p>（1）创建一个NSObject的分类NSObject+AdNotifyEvent。在这个Category中，我们创建了添加观察者的方法，其具体实现由它的associate Object实现。这里的associate Object是类SLVObserverAssociater的对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//  NSObject+AdNotifyEvent.h</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;SLVObserverAssociater.h&quot;</div><div class="line"></div><div class="line">@interface NSObject (AdNotifyEvent)</div><div class="line">- (void)slvWatchObject:(id)object eventName:(NSString *)event block:(SLVNotifyBlock)block;</div><div class="line">- (void)slvWatchObject:(id)object eventName:(NSString *)event level:(double)level block:(SLVNotifyBlock)block;</div><div class="line">@end</div><div class="line"></div><div class="line">//  NSObject+AdNotifyEvent.m</div><div class="line">#import &quot;NSObject+AdNotifyEvent.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line"></div><div class="line">@implementation NSObject (AdNotifyEvent)</div><div class="line">- (SLVObserverAssociater *)observerAssociater</div><div class="line">&#123;</div><div class="line">    SLVObserverAssociater *observerAssociater = (SLVObserverAssociater *)objc_getAssociatedObject(self, _cmd);</div><div class="line">    if (observerAssociater == nil) &#123;</div><div class="line">        observerAssociater = [[SLVObserverAssociater alloc] initWithObserverObject:self];</div><div class="line">        objc_setAssociatedObject(self, _cmd, observerAssociater, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    &#125;</div><div class="line">    return observerAssociater;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)slvWatchObject:(id)object eventName:(NSString *)event block:(SLVNotifyBlock)block</div><div class="line">&#123;</div><div class="line">    [[self observerAssociater] addNotifyEvent:event watchObject:object observerObject:self level:RFEventLevelDefault block:block];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)slvWatchObject:(id)object eventName:(NSString *)event level:(double)level block:(SLVNotifyBlock)block</div><div class="line">&#123;</div><div class="line">    [[self observerAssociater] addNotifyEvent:event watchObject:object observerObject:self level:level block:block];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>（2）SLVObserverAssociater的实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//  SLVObserverAssociater.h</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;SLVNotifyLevelBlocks.h&quot;</div><div class="line"></div><div class="line">@interface SLVObserverAssociater : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, weak) id observerObject;                    // selfRef,观察者</div><div class="line">@property (nonatomic, strong) NSMutableDictionary *notifyMap;    // key:通知名_watchObject value:RFNotifyEventObject</div><div class="line"></div><div class="line">- (id)initWithObserverObject:(id)observerObject;</div><div class="line"></div><div class="line">- (void)addNotifyEvent:(NSString *)event</div><div class="line">           watchObject:(id)watchObject</div><div class="line">        observerObject:(id)observerObject</div><div class="line">                 level:(double)level</div><div class="line">                 block:(SLVNotifyBlock)block;</div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@interface SLVNotifyInfo : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, weak) SLVObserverAssociater *associater;</div><div class="line">@property (nonatomic, unsafe_unretained) id watchObject;                // 被观察对象</div><div class="line">@property (nonatomic, strong) NSString *event;</div><div class="line">@property (nonatomic, strong) NSMutableArray *eventInfos;</div><div class="line">@property (nonatomic, weak) id sysObserverObj;                          // 观察者</div><div class="line"></div><div class="line">- (id)initWithRFEvent:(SLVObserverAssociater *)rfEvent event:(NSString *)event watchObject:(id)watchObject;</div><div class="line">- (void)add:(SLVNotifyLevelBlocks *)info;</div><div class="line">- (void)removeLevel:(double)level;</div><div class="line">- (void)handleRFEventBlockCallback:(NSNotification *)note;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>.m</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//  SLVObserverAssociater.h</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;SLVNotifyLevelBlocks.h&quot;</div><div class="line"></div><div class="line">@interface SLVObserverAssociater : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, weak) id observerObject;                    // selfRef,观察者</div><div class="line">@property (nonatomic, strong) NSMutableDictionary *notifyMap;    // key:通知名_watchObject value:RFNotifyEventObject</div><div class="line"></div><div class="line">- (id)initWithObserverObject:(id)observerObject;</div><div class="line"></div><div class="line">- (void)addNotifyEvent:(NSString *)event</div><div class="line">           watchObject:(id)watchObject</div><div class="line">        observerObject:(id)observerObject</div><div class="line">                 level:(double)level</div><div class="line">                 block:(SLVNotifyBlock)block;</div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@interface SLVNotifyInfo : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, weak) SLVObserverAssociater *associater;</div><div class="line">@property (nonatomic, unsafe_unretained) id watchObject;                // 被观察对象</div><div class="line">@property (nonatomic, strong) NSString *event;</div><div class="line">@property (nonatomic, strong) NSMutableArray *eventInfos;</div><div class="line">@property (nonatomic, weak) id sysObserverObj;                          // 观察者</div><div class="line"></div><div class="line">- (id)initWithRFEvent:(SLVObserverAssociater *)rfEvent event:(NSString *)event watchObject:(id)watchObject;</div><div class="line">- (void)add:(SLVNotifyLevelBlocks *)info;</div><div class="line">- (void)removeLevel:(double)level;</div><div class="line">- (void)handleRFEventBlockCallback:(NSNotification *)note;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>(3)为通知的回调block排了优先级</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#define RFEventLevelDefault                        1000.0f</div><div class="line">typedef void (^SLVNotifyBlock) (NSNotification *note, id selfRef);</div><div class="line"></div><div class="line">@interface SLVNotifyLevelBlocks : NSObject</div><div class="line">@property (nonatomic, assign) double level;         // block的优先级</div><div class="line">@property (nonatomic, copy) SLVNotifyBlock block;   //收到通知后的回调block</div><div class="line">@end</div></pre></td></tr></table></figure><blockquote><p>(4)test</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    [self slvWatchObject:nil eventName:@&quot;newNotification&quot; block:^(NSNotification *aNotification, id weakSelf)&#123;</div><div class="line">        NSLog(@&quot;收到一个通知,现在开始处理了。。。&quot;);</div><div class="line">    &#125; ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;产生原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注册观察者后，没有在观察者dealloc时及时注销观察者，极有可能通知中心再发送通知时发送给僵尸对象而发生Crash。（iOS9以后不会Crash）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防护方案&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Crash" scheme="http://xuaninitial.com/categories/Crash/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="Crash" scheme="http://xuaninitial.com/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>Crash问题总结与防护--unrecognized selector crash</title>
    <link href="http://xuaninitial.com/2018/07/23/Crash%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E4%B8%8E%E9%98%B2%E6%8A%A4-unrecognized-selector-crash/"/>
    <id>http://xuaninitial.com/2018/07/23/Crash问题总结与防护-unrecognized-selector-crash/</id>
    <published>2018-07-23T09:34:21.000Z</published>
    <updated>2018-07-24T09:35:23.056Z</updated>
    
    <content type="html"><![CDATA[<p><strong>产生原因</strong></p><p>​    因为一个对象调用了一个不属于它方法的方法导致的。</p><blockquote><p>eg:UIButton 添加了点击事件没有实现</p></blockquote><p>   方法调用在运行时的过程如下：</p><ol><li>首先，在相应操作的对象中的缓存方法列表中找调用的方法，如果找到，转向相应实现并执行。</li><li>如果没找到，在相应操作的对象中的方法列表中找调用的方法，如果找到，转向相应实现执行</li><li>如果没找到，去父类指针所指向的对象中执行1，2.</li><li>以此类推，如果一直到根类还没找到，转向拦截调用，走消息转发机制。</li><li>如果没有重写拦截调用的方法，程序报错。</li></ol><p><strong>拦截调用</strong></p><p>​      拦截调用就是，在找不到调用的方法程序崩溃之前，你有机会通过重写 NSObject的四个方法来处理:</p><img src="/2018/07/23/Crash问题总结与防护-unrecognized-selector-crash/NSObject.png" alt="NSObject.png" title=""><ol><li>调用resolveInstanceMethod给个机会让类添加这个实现这个函数</li><li>调用forwardingTargetForSelector让别的对象去执行这个函数</li><li>调用forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。</li></ol><p><strong>防护方案</strong></p><p>​     选择了第二步forwardingTargetForSelector来做文章。原因如下：</p><ol><li><p>resolveInstanceMethod需要在类的本身上动态添加它本身不存在的方法，这些方法对于该类本身来说冗余的</p></li><li><p>forwardInvocation可以通过NSInvocation的形式将消息转发给多个对象，但是其开销较大，需要创建新的NSInvocation对象，并且forwardInvocation的函数经常被使用者调用，来做多层消息转发选择机制，不适合多次重写</p></li><li><p>forwardingTargetForSelector可以将消息转发给一个对象，开销较小，并且被重写的概率较低，适合重写</p></li></ol><p><strong>消息转发机制里的三个步骤处理未知选择，步骤越往后，处理消息的代价就        越大。但是步骤越往前，我们越有可能拦截到系统的本来能处理的方法。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;产生原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    因为一个对象调用了一个不属于它方法的方法导致的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eg:UIButton 添加了点击事件没有实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   方法调用在运行时的过
      
    
    </summary>
    
      <category term="Crash" scheme="http://xuaninitial.com/categories/Crash/"/>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="Crash" scheme="http://xuaninitial.com/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSession请求  加gb2312编码</title>
    <link href="http://xuaninitial.com/2018/05/03/NSURLSession%E8%AF%B7%E6%B1%82-%E5%8A%A0gb2312%E7%BC%96%E7%A0%81/"/>
    <id>http://xuaninitial.com/2018/05/03/NSURLSession请求-加gb2312编码/</id>
    <published>2018-05-03T07:53:39.000Z</published>
    <updated>2018-05-03T08:19:11.601Z</updated>
    
    <content type="html"><![CDATA[<p>需求是：请求的时候参数是汉字的进行gb2312编码，</p><p>最开始用的AF，AF默认是UTF-8编码</p><p>通过修改编码格式不行， AF最后提交的时候会进行2次编码，</p><img src="/2018/05/03/NSURLSession请求-加gb2312编码/1.jpg" alt="1.jpg" title=""><img src="/2018/05/03/NSURLSession请求-加gb2312编码/2.jpg" alt="2.jpg" title=""><p>最后用原生写解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">NSStringEncoding encGbk = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);</div><div class="line"></div><div class="line">  //  NSString *retStr =name;</div><div class="line">    NSString *retStr =  [name stringByAddingPercentEscapesUsingEncoding:encGbk];</div><div class="line"></div><div class="line">    NSString * urls = @&quot;&quot;;//地址</div><div class="line">//    NSDictionary * dic = @&#123;</div><div class="line">//                           @&quot;id_card&quot;:id_card,</div><div class="line">//                           @&quot;name&quot;:retStr,</div><div class="line">//                           @&quot;valCode&quot;:valCode,</div><div class="line">//                           @&quot;certificate_code&quot;:@&quot;&quot;,</div><div class="line">//                           @&quot;evelop_code&quot;:@&quot;&quot;</div><div class="line">//                           &#125;;</div><div class="line">    </div><div class="line">    //certificate_code=&amp;evelop_code=&amp;id_card=&amp;name=%E5%90%95%E6%85%A7%E5%BC%BA&amp;valCode=4174</div><div class="line">    </div><div class="line">    NSString *body= [NSString stringWithFormat:@&quot;certificate_code=%@&amp;evelop_code=%@&amp;id_card=%@&amp;name=%@&amp;valCode=%@&quot;,@&quot;&quot;,@&quot;&quot;,id_card,retStr,valCode];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">    NSURLSession *session=[NSURLSession sharedSession];</div><div class="line">    </div><div class="line"></div><div class="line">    NSURL *url=[NSURL URLWithString:urls];</div><div class="line"> </div><div class="line">    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:url];</div><div class="line">    [request setHTTPMethod:@&quot;POST&quot;];</div><div class="line">    </div><div class="line">    [request setValue:@&quot;application/x-www-form-urlencoded;charset=gb2312&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class="line">    </div><div class="line">    request.timeoutInterval = 180;</div><div class="line">    [request setValue:@&quot;iir.circ.gov.cn&quot; forHTTPHeaderField:@&quot;Host&quot;];</div><div class="line">    [request setValue:@&quot;keep-alive&quot; forHTTPHeaderField:@&quot;Connection&quot;];</div><div class="line">    [request setValue:@&quot;gzip,deflate&quot; forHTTPHeaderField:@&quot;Accept-Encoding&quot;];</div><div class="line">    [request setValue:@&quot;zh-CN,zh;q=0.8&quot; forHTTPHeaderField:@&quot;Accept-Language&quot;];</div><div class="line">    [request setValue:@&quot;&quot; forHTTPHeaderField:@&quot;Origin&quot;];//</div><div class="line">    [request setValue:@&quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot; forHTTPHeaderField:@&quot;User-Agent&quot;];</div><div class="line">    [request setValue:@&quot;&quot; forHTTPHeaderField:@&quot;Referer&quot;];//</div><div class="line">    NSString * cookie =  [[NSUserDefaults standardUserDefaults] valueForKey:@&quot;cookie&quot;];</div><div class="line">    NSLog(@&quot;***********************cookie为 %@ *************************&quot;,cookie);</div><div class="line">    [request setValue:cookie forHTTPHeaderField:@&quot;Cookie&quot;];</div><div class="line">   </div><div class="line"></div><div class="line">    [request setValue:@&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">    </div><div class="line">   // request.acceptableContentTypes =  [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, @&quot;text/html&quot;, @&quot;text/css&quot;, @&quot;text/xml&quot;, @&quot;text/plain&quot;, @&quot;application/javascript&quot;, @&quot;image/*&quot;,@&quot;application/json&quot;, nil];</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">   // request.HTTPBody = [[dic mj_JSONString] dataUsingEncoding:encGbk];</div><div class="line">    </div><div class="line">     request.HTTPBody = [body dataUsingEncoding:encGbk];</div><div class="line"></div><div class="line">    NSString *str = [[NSString alloc] initWithData:request.HTTPBody encoding:encGbk];</div><div class="line">    </div><div class="line">    NSLog(@&quot; ***********************请求参数***********************%@&quot;,str);</div><div class="line">    </div><div class="line">    NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error)&#123;</div><div class="line">        </div><div class="line">        </div><div class="line">        if (error ==nil) &#123;</div><div class="line">            NSString *str = [[NSString alloc] initWithData:data encoding:CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000)];</div><div class="line">            </div><div class="line">            VMLog(@&quot; ***********************请求成功***********************%@---------------error===%@&quot;,str,error);</div><div class="line">            </div><div class="line">        &#125;else&#123;</div><div class="line">            </div><div class="line">            VMLog(@&quot;%@&quot;,error);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //7.执行任务</div><div class="line">    [dataTask resume];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需求是：请求的时候参数是汉字的进行gb2312编码，&lt;/p&gt;
&lt;p&gt;最开始用的AF，AF默认是UTF-8编码&lt;/p&gt;
&lt;p&gt;通过修改编码格式不行， AF最后提交的时候会进行2次编码，&lt;/p&gt;
&lt;img src=&quot;/2018/05/03/NSURLSession请求-加gb2
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>配置Hikari中文文档</title>
    <link href="http://xuaninitial.com/2018/01/18/%E9%85%8D%E7%BD%AEHikari%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>http://xuaninitial.com/2018/01/18/配置Hikari中文文档/</id>
    <published>2018-01-18T09:49:30.000Z</published>
    <updated>2018-01-20T06:59:09.266Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://iosre.com/t/hikari/10802" target="_blank" rel="external">本篇文章迁移到iosre</a></p><p>参考：</p><p><a href="http://llvm.org/docs/GettingStarted.html#getting-started-quickly-a-summary" target="_blank" rel="external">LLVM系统入门</a></p><p><a href="https://github.com/Naville/Hikari/wiki" target="_blank" rel="external"><strong>Hikari</strong>  wiki</a></p><p><a href="https://ninja-build.org/" target="_blank" rel="external">Ninja</a></p><p><a href="http://xuaninitial.com/2017/11/24/Homebrew/">Homebrew</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://iosre.com/t/hikari/10802&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本篇文章迁移到iosre&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://llvm.org/docs
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用itms-services 协议来安装App</title>
    <link href="http://xuaninitial.com/2018/01/08/%E4%BD%BF%E7%94%A8itms-services-%E5%8D%8F%E8%AE%AE%E6%9D%A5%E5%AE%89%E8%A3%85App/"/>
    <id>http://xuaninitial.com/2018/01/08/使用itms-services-协议来安装App/</id>
    <published>2018-01-08T08:12:30.000Z</published>
    <updated>2018-01-08T08:20:52.108Z</updated>
    
    <content type="html"><![CDATA[<p>苹果允许用<a href="https://github.com/xuanInitial/node-itms-services" target="_blank" rel="external">itms-services</a>协议来直接在iphone/ipad上安装应用程序,创建安装流程如下：</p><p>1、打包一个ad_hoc ipa文件，</p><p>2、配置一个plist文件，plist文件配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">   &lt;key&gt;items&lt;/key&gt;</div><div class="line">   &lt;array&gt;</div><div class="line">       &lt;dict&gt;</div><div class="line">           &lt;key&gt;assets&lt;/key&gt;</div><div class="line">           &lt;array&gt;</div><div class="line">               &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;https://****/**/tue_test.ipa(ipa文件的访问地址)&lt;/string&gt;</div><div class="line">               &lt;/dict&gt;</div><div class="line">               &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class="line">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class="line">                   &lt;true/&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;图片的地址&lt;/string&gt;</div><div class="line">               &lt;/dict&gt;</div><div class="line">      &lt;dict&gt;</div><div class="line">                   &lt;key&gt;kind&lt;/key&gt;</div><div class="line">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class="line">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class="line">                   &lt;true/&gt;</div><div class="line">                   &lt;key&gt;url&lt;/key&gt;</div><div class="line">                   &lt;string&gt;图片的地址&lt;/string&gt;</div><div class="line">              &lt;/dict&gt;</div><div class="line">           &lt;/array&gt;</div><div class="line">           &lt;key&gt;metadata&lt;/key&gt;</div><div class="line">           &lt;dict&gt;</div><div class="line">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class="line">               &lt;string&gt;com.xx.xx(bundleID需要ipa中需要保持一致)&lt;/string&gt;</div><div class="line">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class="line">               &lt;string&gt;1.0(CFBundleVersion需要和ipa中的保持一致)&lt;/string&gt;</div><div class="line">               &lt;key&gt;kind&lt;/key&gt;</div><div class="line">               &lt;string&gt;software&lt;/string&gt;</div><div class="line">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class="line">               &lt;string&gt;&lt;/string&gt;</div><div class="line">               &lt;key&gt;title&lt;/key&gt;</div><div class="line">               &lt;string&gt;提示&lt;/string&gt;</div><div class="line">           &lt;/dict&gt;</div><div class="line">       &lt;/dict&gt;</div><div class="line">   &lt;/array&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure><p>3、保存app.plist文件并将其上传到<strong>HTTPS</strong>的Web服务器。</p><p>4、创建一个连接给用户下载</p><blockquote><p><strong>重要信息</strong></p><p>链接如下： <em>itms-services：//？action = download-manifest＆amp; url = 链接。</em> 将<strong>链接</strong> 替换为位于Web服务器上的app.plist文件的URL。</p></blockquote><p>5、生成二维码下载</p><p><a href="https://github.com/xuanInitial/UrlDownModel" target="_blank" rel="external">下载模板</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;苹果允许用&lt;a href=&quot;https://github.com/xuanInitial/node-itms-services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;itms-services&lt;/a&gt;协议来直接在iphone/ipad上安装应用程序
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://xuaninitial.com/2017/12/31/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://xuaninitial.com/2017/12/31/2017年终总结/</id>
    <published>2017-12-31T15:45:36.000Z</published>
    <updated>2017-12-31T15:49:42.120Z</updated>
    
    <content type="html"><![CDATA[<p>年终了总想着要写点什么东西，又不知道从何写起，想到哪里写到哪里吧</p><p>先说工作吧，入坑三年，这边公司也满一年了，忙忙碌碌的一年</p><p>这一年看了很多书 凡人开始仙界篇了 算是10年的一个开始，也算是青春的结束 辰一更也开始新的征程了</p><p>小黄书断断续续的看了3分子1吧 明年继续 </p><p>非虫大佬的逆向分析倒是读了一半</p><p>代码之外的生存指南 读完了想写点东西一直没写</p><p>小王子  一本伤心的童话故事</p><p>swift 1~4一直没系统的学习 写过一些东西 在用 还需要学习</p><p>Android、h5、css 稍有涉猎</p><p>自己的时间比较少吧 游戏玩的少了，学习的时间有点不足，旅游什么的就不说了，18年希望可以拿出更多属于自己的时间吧</p><p>18岁的结束 90后的时代结束了  18年加油祝自己好运</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;年终了总想着要写点什么东西，又不知道从何写起，想到哪里写到哪里吧&lt;/p&gt;
&lt;p&gt;先说工作吧，入坑三年，这边公司也满一年了，忙忙碌碌的一年&lt;/p&gt;
&lt;p&gt;这一年看了很多书 凡人开始仙界篇了 算是10年的一个开始，也算是青春的结束 辰一更也开始新的征程了&lt;/p&gt;
&lt;p&gt;小黄书断
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://xuaninitial.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记_1</title>
    <link href="http://xuaninitial.com/2017/11/24/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://xuaninitial.com/2017/11/24/逆向学习笔记-1/</id>
    <published>2017-11-24T04:02:43.000Z</published>
    <updated>2017-11-24T04:04:03.943Z</updated>
    
    <content type="html"><![CDATA[<p><strong>main</strong>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__attribute__((constructor)) static void entry() &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define CHConstructor static __attribute__((constructor)) void CHConcat(CHConstructor, __LINE__)()</div></pre></td></tr></table></figure><p>通过view的nextResponder方法，可以找出它所属的视图控制器ViewController</p><ul><li>内存地址＝进程内存基地址＋函数在二进制中的偏移量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">br s -a &apos;0X00000000000E800+0x00000001017d7c6c&apos;</div></pre></td></tr></table></figure><ul><li>函数在二进制中的偏移量＝内存地址 - 进程内存基地址</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;main&lt;/strong&gt;函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="iOSRE" scheme="http://xuaninitial.com/tags/iOSRE/"/>
    
  </entry>
  
  <entry>
    <title>UITableView卡顿问题处理</title>
    <link href="http://xuaninitial.com/2017/11/24/UITableView%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>http://xuaninitial.com/2017/11/24/UITableView卡顿问题处理/</id>
    <published>2017-11-24T03:58:10.000Z</published>
    <updated>2017-11-24T03:59:20.753Z</updated>
    
    <content type="html"><![CDATA[<p>1、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;</div></pre></td></tr></table></figure><p>这个代理方法每次滑动都会调用 建议不要在里面做耗时操作</p><p>eg:重新计算高度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CGSize strSize = [str boundingRectWithSize:CGSizeMake(BHSCREEN_W - 32, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName:BH14Font&#125; context:nil].size;</div><div class="line">   return strSize.height+10;</div></pre></td></tr></table></figure><p>2、富文本串AttributeString的绘制也很耗时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSMutableAttributedString *AttributedStr = [[NSMutableAttributedString alloc]initWithString:str];</div><div class="line">           [AttributedStr addAttribute:NSFontAttributeName</div><div class="line"></div><div class="line">                                 value:[UIFont systemFontOfSize:16.0]</div><div class="line"></div><div class="line">                                 range:NSMakeRange(5, str.length-5)];</div><div class="line"></div><div class="line">           [AttributedStr addAttribute:NSForegroundColorAttributeName</div><div class="line"></div><div class="line">                                 value:[UIColor redColor]</div><div class="line"></div><div class="line">                                 range:NSMakeRange(5, str.length-5)];</div><div class="line"></div><div class="line">           _AmountPayableLabel.attributedText = AttributedStr;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div 
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>NSInteger32位64位问题</title>
    <link href="http://xuaninitial.com/2017/11/24/NSInteger32%E4%BD%8D64%E4%BD%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://xuaninitial.com/2017/11/24/NSInteger32位64位问题/</id>
    <published>2017-11-24T03:55:55.000Z</published>
    <updated>2017-11-24T03:57:25.526Z</updated>
    
    <content type="html"><![CDATA[<p>64bit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orderNum = 1150815970118744;</div></pre></td></tr></table></figure><p>32bit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) po model.orderNum</div><div class="line">-1714505370</div><div class="line"></div><div class="line">(lldb)</div></pre></td></tr></table></figure><p>解决方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic,copy) NSString * orderNum;</div></pre></td></tr></table></figure><p>原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#if __LP64__ || (TARGET_OS_EMBEDDED &amp;&amp; !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64</div><div class="line">typedef long NSInteger;</div><div class="line">typedef unsigned long NSUInteger;</div><div class="line">#else</div><div class="line">typedef int NSInteger;</div><div class="line">typedef unsigned int NSUInteger;</div><div class="line">#endif</div></pre></td></tr></table></figure><p>NSInteger在32位时等同于int，在64位时等同于long</p><p>32bit下：</p><p>unsigned int 0～4294967295  </p><p>int -2147483648～2147483647 </p><p>long long的最大值：9223372036854775807<br>long long的最小值：-9223372036854775808</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;64bit&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://xuaninitial.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew</title>
    <link href="http://xuaninitial.com/2017/11/24/Homebrew/"/>
    <id>http://xuaninitial.com/2017/11/24/Homebrew/</id>
    <published>2017-11-24T03:51:08.000Z</published>
    <updated>2017-11-24T03:53:05.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></h1><p><a href="https://github.com/GoSSIP-SJTU/Armariris" target="_blank" rel="external">LLVM混淆框架</a></p><p>删除brew   </p><p>brew  cleanup</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Home
      
    
    </summary>
    
    
      <category term="tools" scheme="http://xuaninitial.com/tags/tools/"/>
    
  </entry>
  
</feed>
